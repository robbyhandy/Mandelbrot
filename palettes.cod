; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24213.1 

	TITLE	D:\Stanley\Desktop\quickman_v110\source\palettes.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_pal_0	DD	00H
	DD	00H
	DD	010101H
	DD	010101H
	DD	020202H
	DD	030303H
	DD	040404H
	DD	050505H
	DD	060606H
	DD	070707H
	DD	080808H
	DD	090909H
	DD	0a0a0aH
	DD	0b0b0bH
	DD	0c0c0cH
	DD	0d0d0dH
	DD	0e0e0eH
	DD	0f0f0fH
	DD	0101010H
	DD	0121212H
	DD	0131313H
	DD	0141414H
	DD	0151515H
	DD	0171717H
	DD	0181818H
	DD	0191919H
	DD	01b1b1bH
	DD	01c1c1cH
	DD	01e1e1eH
	DD	01f1f1fH
	DD	0202020H
	DD	0222222H
	DD	0232323H
	DD	0252525H
	DD	0262626H
	DD	0282828H
	DD	02a2a2aH
	DD	02b2b2bH
	DD	02d2d2dH
	DD	02e2e2eH
	DD	0303030H
	DD	0323232H
	DD	0333333H
	DD	0353535H
	DD	0373737H
	DD	0383838H
	DD	03a3a3aH
	DD	03c3c3cH
	DD	03e3e3eH
	DD	03f3f3fH
	DD	0414141H
	DD	0434343H
	DD	0454545H
	DD	0474747H
	DD	0484848H
	DD	04a4a4aH
	DD	04c4c4cH
	DD	04e4e4eH
	DD	0505050H
	DD	0525252H
	DD	0545454H
	DD	0565656H
	DD	0575757H
	DD	0595959H
	DD	05b5b5bH
	DD	05d5d5dH
	DD	05f5f5fH
	DD	0616161H
	DD	0636363H
	DD	0656565H
	DD	0676767H
	DD	0696969H
	DD	06b6b6bH
	DD	06d6d6dH
	DD	06f6f6fH
	DD	0717171H
	DD	0737373H
	DD	0757575H
	DD	0777777H
	DD	0797979H
	DD	07b7b7bH
	DD	07d7d7dH
	DD	07f7f7fH
	DD	0808080H
	DD	0828282H
	DD	0848484H
	DD	0868686H
	DD	0888888H
	DD	08a8a8aH
	DD	08c8c8cH
	DD	08e8e8eH
	DD	0909090H
	DD	0929292H
	DD	0949494H
	DD	0969696H
	DD	0989898H
	DD	09a9a9aH
	DD	09c9c9cH
	DD	09e9e9eH
	DD	0a0a0a0H
	DD	0a2a2a2H
	DD	0a3a3a3H
	DD	0a5a5a5H
	DD	0a7a7a7H
	DD	0a9a9a9H
	DD	0abababH
	DD	0adadadH
	DD	0afafafH
	DD	0b1b1b1H
	DD	0b2b2b2H
	DD	0b4b4b4H
	DD	0b6b6b6H
	DD	0b8b8b8H
	DD	0b9b9b9H
	DD	0bbbbbbH
	DD	0bdbdbdH
	DD	0bfbfbfH
	DD	0c0c0c0H
	DD	0c2c2c2H
	DD	0c4c4c4H
	DD	0c5c5c5H
	DD	0c7c7c7H
	DD	0c9c9c9H
	DD	0cacacaH
	DD	0ccccccH
	DD	0cececeH
	DD	0cfcfcfH
	DD	0d1d1d1H
	DD	0d2d2d2H
	DD	0d4d4d4H
	DD	0d5d5d5H
	DD	0d7d7d7H
	DD	0d8d8d8H
	DD	0dadadaH
	DD	0dbdbdbH
	DD	0dcdcdcH
	DD	0dededeH
	DD	0dfdfdfH
	DD	0e0e0e0H
	DD	0e2e2e2H
	DD	0e3e3e3H
	DD	0e4e4e4H
	DD	0e5e5e5H
	DD	0e7e7e7H
	DD	0e8e8e8H
	DD	0e9e9e9H
	DD	0eaeaeaH
	DD	0ebebebH
	DD	0ecececH
	DD	0edededH
	DD	0eeeeeeH
	DD	0efefefH
	DD	0f0f0f0H
	DD	0f1f1f1H
	DD	0f2f2f2H
	DD	0f3f3f3H
	DD	0f4f4f4H
	DD	0f5f5f5H
	DD	0f5f5f5H
	DD	0f6f6f6H
	DD	0f7f7f7H
	DD	0f8f8f8H
	DD	0f8f8f8H
	DD	0f9f9f9H
	DD	0f9f9f9H
	DD	0fafafaH
	DD	0fafafaH
	DD	0fbfbfbH
	DD	0fbfbfbH
	DD	0fcfcfcH
	DD	0fcfcfcH
	DD	0fdfdfdH
	DD	0fdfdfdH
	DD	0fdfdfdH
	DD	0fdfdfdH
	DD	0fefefeH
	DD	0fefefeH
	DD	0fefefeH
	DD	0fefefeH
	DD	0fefefeH
	DD	0fefefeH
	DD	0fefefeH
	DD	0fdfdfdH
	DD	0fdfdfdH
	DD	0fcfcfcH
	DD	0fbfbfbH
	DD	0fafafaH
	DD	0f8f8f8H
	DD	0f7f7f7H
	DD	0f5f5f5H
	DD	0f3f3f3H
	DD	0f1f1f1H
	DD	0efefefH
	DD	0ecececH
	DD	0eaeaeaH
	DD	0e7e7e7H
	DD	0e4e4e4H
	DD	0e2e2e2H
	DD	0dfdfdfH
	DD	0dbdbdbH
	DD	0d8d8d8H
	DD	0d4d4d4H
	DD	0d1d1d1H
	DD	0cdcdcdH
	DD	0cacacaH
	DD	0c6c6c6H
	DD	0c2c2c2H
	DD	0bebebeH
	DD	0bababaH
	DD	0b6b6b6H
	DD	0b2b2b2H
	DD	0adadadH
	DD	0a9a9a9H
	DD	0a5a5a5H
	DD	0a0a0a0H
	DD	09c9c9cH
	DD	0989898H
	DD	0939393H
	DD	08e8e8eH
	DD	08a8a8aH
	DD	0858585H
	DD	0818181H
	DD	07c7c7cH
	DD	0777777H
	DD	0737373H
	DD	06e6e6eH
	DD	06a6a6aH
	DD	0656565H
	DD	0616161H
	DD	05c5c5cH
	DD	0585858H
	DD	0535353H
	DD	04f4f4fH
	DD	04a4a4aH
	DD	0464646H
	DD	0424242H
	DD	03e3e3eH
	DD	03a3a3aH
	DD	0363636H
	DD	0323232H
	DD	02e2e2eH
	DD	02a2a2aH
	DD	0272727H
	DD	0232323H
	DD	0202020H
	DD	01d1d1dH
	DD	0191919H
	DD	0161616H
	DD	0131313H
	DD	0101010H
	DD	0e0e0eH
	DD	0b0b0bH
	DD	090909H
	DD	070707H
	DD	050505H
	DD	030303H
_pal_1	DD	00H
	DD	0c141cH
	DD	0182838H
	DD	0243c54H
	DD	0305070H
	DD	03c648cH
	DD	04878a8H
	DD	0548cc4H
	DD	060a0e0H
	DD	06cb4fcH
	DD	078c8e4H
	DD	084dcc8H
	DD	090f0acH
	DD	09cf890H
	DD	0a8e474H
	DD	0b4d058H
	DD	0c0bc3cH
	DD	0cca820H
	DD	0d89404H
	DD	0e48014H
	DD	0f06c30H
	DD	0fc584cH
	DD	0f44468H
	DD	0e83084H
	DD	0dc1ca0H
	DD	0d008bcH
	DD	0c408d8H
	DD	0b81cf4H
	DD	0ac30ecH
	DD	0a044d0H
	DD	09458b4H
	DD	0886c98H
	DD	07c807cH
	DD	0709460H
	DD	064a844H
	DD	058bc28H
	DD	04cd00cH
	DD	040e40cH
	DD	034f828H
	DD	028f044H
	DD	01cdc60H
	DD	010c87cH
	DD	04b498H
	DD	04a0b4H
	DD	0108cd0H
	DD	01c78ecH
	DD	02864f4H
	DD	03450d8H
	DD	0403cbcH
	DD	04c28a0H
	DD	0581484H
	DD	0640068H
	DD	070104cH
	DD	07c2430H
	DD	0883814H
	DD	0944c04H
	DD	0a06020H
	DD	0ac743cH
	DD	0b88858H
	DD	0c49c74H
	DD	0d0b090H
	DD	0dcc4acH
	DD	0e8d8c8H
	DD	0f4ece4H
	DD	0287c80H
	DD	0887090H
	DD	03864a0H
	DD	09858b0H
	DD	0484cc0H
	DD	0a840d0H
	DD	05834e0H
	DD	0b828f0H
	DD	0681cfcH
	DD	0c810ecH
	DD	07804dcH
	DD	0d804ccH
	DD	08810bcH
	DD	0e81cacH
	DD	098289cH
	DD	0f8348cH
	DD	0a8407cH
	DD	0f44c6cH
	DD	0b8585cH
	DD	0e4644cH
	DD	0c8703cH
	DD	0d47c2cH
	DD	0d8881cH
	DD	0c4940cH
	DD	0e8a000H
	DD	0b4ac10H
	DD	0f8b820H
	DD	0a4c430H
	DD	0f4d040H
	DD	094dc50H
	DD	0e4e860H
	DD	084f470H
	DD	0d4fc80H
	DD	074f090H
	DD	0c4e4a0H
	DD	064d8b0H
	DD	0b4ccc0H
	DD	054c0d0H
	DD	0a4b4e0H
	DD	044a8f0H
	DD	0949cfcH
	DD	03490ecH
	DD	08484dcH
	DD	02478ccH
	DD	0746cbcH
	DD	01460acH
	DD	064549cH
	DD	04488cH
	DD	0543c7cH
	DD	08306cH
	DD	044245cH
	DD	018184cH
	DD	0340c3cH
	DD	028002cH
	DD	024081cH
	DD	038140cH
	DD	0142000H
	DD	0482c10H
	DD	043820H
	DD	0584430H
	DD	085040H
	DD	0685c50H
	DD	0186860H
	DD	0787470H
	DD	00H
	DD	08080cH
	DD	0101018H
	DD	0181824H
	DD	0202030H
	DD	028283cH
	DD	0303048H
	DD	0383854H
	DD	0404060H
	DD	048486cH
	DD	0505078H
	DD	0585884H
	DD	0606090H
	DD	068689cH
	DD	07070a8H
	DD	07878b4H
	DD	08080c0H
	DD	08888ccH
	DD	09090d8H
	DD	09898e4H
	DD	0a0a0f0H
	DD	0a8a8fcH
	DD	0b0b0f4H
	DD	0b8b8e8H
	DD	0c0c0dcH
	DD	0c8c8d0H
	DD	0d0d0c4H
	DD	0d8d8b8H
	DD	0e0e0acH
	DD	0e8e8a0H
	DD	0f0f094H
	DD	0f8f888H
	DD	0fcfc7cH
	DD	0f4f470H
	DD	0ecec64H
	DD	0e4e458H
	DD	0dcdc4cH
	DD	0d4d440H
	DD	0cccc34H
	DD	0c4c428H
	DD	0bcbc1cH
	DD	0b4b410H
	DD	0acac04H
	DD	0a4a404H
	DD	09c9c10H
	DD	094941cH
	DD	08c8c28H
	DD	0848434H
	DD	07c7c40H
	DD	074744cH
	DD	06c6c58H
	DD	0646464H
	DD	05c5c70H
	DD	054547cH
	DD	04c4c88H
	DD	0444494H
	DD	03c3ca0H
	DD	03434acH
	DD	02c2cb8H
	DD	02424c4H
	DD	01c1cd0H
	DD	01414dcH
	DD	0c0ce8H
	DD	0404f4H
	DD	04850b4H
	DD	03cbcbcH
	DD	03060c4H
	DD	024ccccH
	DD	01870d4H
	DD	0cdcdcH
	DD	080e4H
	DD	08ececH
	DD	01490f4H
	DD	020fcfcH
	DD	02ca0f8H
	DD	038f0f0H
	DD	044b0e8H
	DD	050e0e0H
	DD	05cc0d8H
	DD	068d0d0H
	DD	074d0c8H
	DD	080c0c0H
	DD	08ce0b8H
	DD	098b0b0H
	DD	0a4f0a8H
	DD	0b0a0a0H
	DD	0bcfc98H
	DD	0c89090H
	DD	0d4ec88H
	DD	0e08080H
	DD	0ecdc78H
	DD	0f87070H
	DD	0f8cc68H
	DD	0ec6060H
	DD	0e0bc58H
	DD	0d45050H
	DD	0c8ac48H
	DD	0bc4040H
	DD	0b09c38H
	DD	0a43030H
	DD	0988c28H
	DD	08c2020H
	DD	0807c18H
	DD	0741010H
	DD	0686c08H
	DD	05c0000H
	DD	0505c04H
	DD	0440c0cH
	DD	0384c14H
	DD	02c1c1cH
	DD	0203c24H
	DD	0142c2cH
	DD	082c34H
	DD	03c3cH
	DD	0c1c44H
	DD	0184c4cH
	DD	0240c54H
	DD	0305c5cH
	DD	03c0064H
	DD	0486c6cH
	DD	0541074H
	DD	0607c7cH
	DD	06c2084H
	DD	0788c8cH
	DD	0843094H
	DD	0909c9cH
	DD	09c40a4H
	DD	0a8acacH
_pal_2	DD	00H
	DD	0d0606H
	DD	0160707H
	DD	01f0707H
	DD	02b0808H
	DD	0360808H
	DD	0430808H
	DD	0510909H
	DD	05e0909H
	DD	06c0909H
	DD	0790808H
	DD	0880909H
	DD	0940808H
	DD	0a10808H
	DD	0ac0707H
	DD	0b70606H
	DD	0c10606H
	DD	0ca0505H
	DD	0d20505H
	DD	0d90404H
	DD	0e00404H
	DD	0e50303H
	DD	0ea0303H
	DD	0ee0303H
	DD	0f10202H
	DD	0f40202H
	DD	0f80101H
	DD	0fc0101H
	DD	0fe0000H
	DD	0ff0000H
	DD	0ff0000H
	DD	0ff0100H
	DD	0ff0400H
	DD	0ff0800H
	DD	0ff0c00H
	DD	0ff1100H
	DD	0ff1600H
	DD	0ff1c00H
	DD	0ff2200H
	DD	0ff2800H
	DD	0ff2e00H
	DD	0ff3500H
	DD	0ff3c00H
	DD	0ff4300H
	DD	0ff4a00H
	DD	0ff5200H
	DD	0ff5900H
	DD	0ff6100H
	DD	0ff6900H
	DD	0ff7100H
	DD	0ff7900H
	DD	0ff8100H
	DD	0ff8800H
	DD	0ff9000H
	DD	0ff9800H
	DD	0ffa000H
	DD	0ffa700H
	DD	0ffaf00H
	DD	0ffb600H
	DD	0ffbd00H
	DD	0ffc400H
	DD	0ffcb00H
	DD	0ffd100H
	DD	0ffd700H
	DD	0ffdd00H
	DD	0ffe200H
	DD	0ffe800H
	DD	0ffec00H
	DD	0fff000H
	DD	0fff400H
	DD	0fff800H
	DD	0fffa00H
	DD	0fefc00H
	DD	0fbfc01H
	DD	0f7fc01H
	DD	0f3fc02H
	DD	0effc03H
	DD	0eafc03H
	DD	0e5fc04H
	DD	0e0fc05H
	DD	0dbfc05H
	DD	0d5fc06H
	DD	0cffc07H
	DD	0c9fc07H
	DD	0c2fc08H
	DD	0bcfa09H
	DD	0b5f80aH
	DD	0aef60aH
	DD	0a7f30bH
	DD	0a0f10cH
	DD	099ee0dH
	DD	092eb0eH
	DD	08ae90fH
	DD	083e610H
	DD	07ce311H
	DD	074e012H
	DD	06ddd13H
	DD	066da15H
	DD	05fd716H
	DD	058d417H
	DD	051d119H
	DD	04ace1aH
	DD	043cb1cH
	DD	03dc81eH
	DD	036c61fH
	DD	030c321H
	DD	02ac123H
	DD	024be25H
	DD	01fbc27H
	DD	01aba29H
	DD	015b92cH
	DD	010b72eH
	DD	0cb631H
	DD	08b533H
	DD	04b436H
	DD	01b439H
	DD	0b43cH
	DD	0b43fH
	DD	0b442H
	DD	0b546H
	DD	0b64aH
	DD	0b74eH
	DD	0b852H
	DD	0b956H
	DD	0bb5bH
	DD	0bc60H
	DD	0be65H
	DD	0c06aH
	DD	0c26fH
	DD	0c474H
	DD	0c679H
	DD	0c87fH
	DD	0ca84H
	DD	0cd8aH
	DD	0cf8fH
	DD	0d195H
	DD	0d49aH
	DD	0d6a0H
	DD	0d8a5H
	DD	0dbadH
	DD	0dfb5H
	DD	0e2bdH
	DD	0e5c5H
	DD	0e7ccH
	DD	0ead3H
	DD	0eadaH
	DD	0eae0H
	DD	0eae6H
	DD	0eaecH
	DD	0eaf1H
	DD	0eaf5H
	DD	0eaf9H
	DD	0eafcH
	DD	0eafeH
	DD	0e9ffH
	DD	0e4ffH
	DD	0dfffH
	DD	0d9ffH
	DD	0d2fdH
	DD	0cafaH
	DD	0c2f6H
	DD	0b9f2H
	DD	0b0eeH
	DD	0a6e9H
	DD	09be3H
	DD	091ddH
	DD	086d7H
	DD	07bd1H
	DD	075cdH
	DD	06fcaH
	DD	069c6H
	DD	063c3H
	DD	05dbfH
	DD	057bcH
	DD	052b9H
	DD	04cb5H
	DD	047b2H
	DD	041afH
	DD	03cacH
	DD	036a9H
	DD	031a6H
	DD	02ca3H
	DD	028a1H
	DD	0239eH
	DD	01f9cH
	DD	01a9aH
	DD	01698H
	DD	01396H
	DD	0f94H
	DD	0c93H
	DD	0992H
	DD	0691H
	DD	0390H
	DD	030190H
	DD	070090H
	DD	0c0090H
	DD	0100090H
	DD	0150090H
	DD	01b0090H
	DD	0210090H
	DD	0270091H
	DD	02d0092H
	DD	0340093H
	DD	03b0094H
	DD	0420096H
	DD	0490097H
	DD	0510099H
	DD	059009bH
	DD	060009cH
	DD	068009eH
	DD	07000a0H
	DD	07800a2H
	DD	08000a4H
	DD	08c00a7H
	DD	09800aaH
	DD	0a400aeH
	DD	0af00b1H
	DD	0ba00b4H
	DD	0c500b7H
	DD	0cf00baH
	DD	0d900bcH
	DD	0e200bfH
	DD	0ea00c1H
	DD	0f200c3H
	DD	0f800c4H
	DD	0fe00c6H
	DD	0fd01c5H
	DD	0fb04c3H
	DD	0f806c1H
	DD	0f606c0H
	DD	0f507bfH
	DD	0f207beH
	DD	0f008bcH
	DD	0ed09baH
	DD	0eb0ab8H
	DD	0e70bb6H
	DD	0e30bb3H
	DD	0de0cafH
	DD	0d90dacH
	DD	0d30ea7H
	DD	0cb0fa1H
	DD	0c2119aH
	DD	0b81293H
	DD	0ad138aH
	DD	0a01381H
	DD	0931477H
	DD	086156cH
	DD	0781462H
	DD	06a1457H
	DD	05b134bH
	DD	04d1240H
	DD	0401136H
	DD	033102bH
	DD	0260e21H
	DD	01b0c18H
	DD	0120b10H
_pal_3	DD	00H
	DD	0184048H
	DD	0141c54H
	DD	0101850H
	DD	0141c4cH
	DD	01c204cH
	DD	0242448H
	DD	02c2848H
	DD	0302c44H
	DD	0383044H
	DD	0403444H
	DD	0483840H
	DD	04c3c40H
	DD	054403cH
	DD	05c443cH
	DD	058483cH
	DD	0584c40H
	DD	0585040H
	DD	0545444H
	DD	0545844H
	DD	0545c48H
	DD	050604cH
	DD	04c6450H
	DD	0486854H
	DD	0446c58H
	DD	040705cH
	DD	03c7864H
	DD	0307c6cH
	DD	0347c68H
	DD	03c8064H
	DD	0448460H
	DD	0488860H
	DD	0508c5cH
	DD	0588c58H
	DD	0609054H
	DD	0649454H
	DD	06c9850H
	DD	0749c4cH
	DD	080a048H
	DD	08ca448H
	DD	098a844H
	DD	0a4ac44H
	DD	0b0b040H
	DD	0bcb440H
	DD	0ccb840H
	DD	0dcbc40H
	DD	0e8c03cH
	DD	0f8c43cH
	DD	0f8c444H
	DD	0f8cc50H
	DD	0f8cc58H
	DD	0f8d468H
	DD	0f4cc64H
	DD	0f4c860H
	DD	0f4c45cH
	DD	0f4c05cH
	DD	0f4bc58H
	DD	0f4b454H
	DD	0f4b050H
	DD	0f4ac50H
	DD	0f4a84cH
	DD	0f4a448H
	DD	0f49c48H
	DD	0f49844H
	DD	0f49440H
	DD	0f4903cH
	DD	0f48c3cH
	DD	0f48438H
	DD	0f48034H
	DD	0f47c34H
	DD	0f47830H
	DD	0f4742cH
	DD	0f46c28H
	DD	0f46828H
	DD	0f46424H
	DD	0f46020H
	DD	0f45c1cH
	DD	0f4541cH
	DD	0f45018H
	DD	0f44c14H
	DD	0f44814H
	DD	0f44410H
	DD	0f43c0cH
	DD	0f43808H
	DD	0f43408H
	DD	0f43004H
	DD	0f42c00H
	DD	0ec2c00H
	DD	0e82c00H
	DD	0e42c04H
	DD	0dc3004H
	DD	0d83008H
	DD	0d43008H
	DD	0cc2c08H
	DD	0c42c08H
	DD	0bc2c08H
	DD	0b42808H
	DD	0ac2808H
	DD	0a42808H
	DD	0a02408H
	DD	0982408H
	DD	0902408H
	DD	0882008H
	DD	0802008H
	DD	0782008H
	DD	0701c08H
	DD	06c1c08H
	DD	0641808H
	DD	05c1808H
	DD	0541808H
	DD	04c1408H
	DD	0441408H
	DD	03c1408H
	DD	0381408H
	DD	0301008H
	DD	0281008H
	DD	0201008H
	DD	0180c08H
	DD	018100cH
	DD	01c1810H
	DD	01c1c14H
	DD	01c2018H
	DD	020241cH
	DD	0202820H
	DD	0243028H
	DD	0242c28H
	DD	0202828H
	DD	01c2428H
	DD	0182028H
	DD	0141c28H
	DD	0101828H
	DD	0101428H
	DD	0c1028H
	DD	080c28H
	DD	040828H
	DD	040828H
	DD	040828H
	DD	080c28H
	DD	0c1028H
	DD	010142cH
	DD	018182cH
	DD	01c1c30H
	DD	0202030H
	DD	0282434H
	DD	02c2838H
	DD	0303038H
	DD	038343cH
	DD	03c383cH
	DD	0403c40H
	DD	0484044H
	DD	04c4444H
	DD	0504848H
	DD	0544c48H
	DD	05c544cH
	DD	0605850H
	DD	0645c50H
	DD	06c6054H
	DD	0706454H
	DD	0746858H
	DD	07c6c58H
	DD	080705cH
	DD	0887860H
	DD	08c7c60H
	DD	0908064H
	DD	0988464H
	DD	09c8868H
	DD	0a08c6cH
	DD	0a8906cH
	DD	0ac9470H
	DD	0b09c70H
	DD	0b8a074H
	DD	0bca478H
	DD	0c0a878H
	DD	0c8ac7cH
	DD	0ccb07cH
	DD	0d0b480H
	DD	0d8bc84H
	DD	0dcc088H
	DD	0e0c488H
	DD	0e8c88cH
	DD	0eccc8cH
	DD	0ecc488H
	DD	0e8c084H
	DD	0e8bc80H
	DD	0e8b880H
	DD	0e8b47cH
	DD	0e4b07cH
	DD	0e4ac78H
	DD	0e4ac78H
	DD	0e4a874H
	DD	0e4a474H
	DD	0e0a070H
	DD	0e09c70H
	DD	0e0986cH
	DD	0e0946cH
	DD	0dc9468H
	DD	0dc9068H
	DD	0dc8c64H
	DD	0dc8864H
	DD	0dc8460H
	DD	0d88060H
	DD	0d8805cH
	DD	0d87c5cH
	DD	0d87858H
	DD	0d87454H
	DD	0d47054H
	DD	0d46c50H
	DD	0d46850H
	DD	0d4684cH
	DD	0d0644cH
	DD	0d06048H
	DD	0d05c48H
	DD	0d05844H
	DD	0d05444H
	DD	0cc5440H
	DD	0cc5040H
	DD	0cc4c3cH
	DD	0cc483cH
	DD	0c84438H
	DD	0c84038H
	DD	0c83c34H
	DD	0c83c34H
	DD	0c83830H
	DD	0c43430H
	DD	0c4302cH
	DD	0bc2c28H
	DD	0b82c28H
	DD	0b42c28H
	DD	0b02c28H
	DD	0ac2c28H
	DD	0a82c28H
	DD	0a42c28H
	DD	09c2c28H
	DD	0982c28H
	DD	0942c28H
	DD	0902c28H
	DD	08c2828H
	DD	0882828H
	DD	0842828H
	DD	0802828H
	DD	0782828H
	DD	0742828H
	DD	0702828H
	DD	06c2828H
	DD	0682828H
	DD	0642828H
	DD	0602828H
	DD	05c2828H
	DD	0543028H
	DD	04c342cH
	DD	03c3828H
	DD	0304024H
	DD	0244820H
	DD	0205820H
	DD	01c6814H
	DD	0288834H
_pal_4	DD	00H
	DD	080087cH
	DD	07c0874H
	DD	0780870H
	DD	0740868H
	DD	0740864H
	DD	0700860H
	DD	06c0858H
	DD	0680854H
	DD	068084cH
	DD	0640848H
	DD	0600c44H
	DD	0600c3cH
	DD	05c0c38H
	DD	0580c34H
	DD	0541030H
	DD	054102cH
	DD	0501028H
	DD	04c1024H
	DD	04c1420H
	DD	048141cH
	DD	0441818H
	DD	0441814H
	DD	0401810H
	DD	03c1c10H
	DD	03c1c0cH
	DD	038200cH
	DD	0342008H
	DD	0342408H
	DD	0302408H
	DD	0302808H
	DD	02c2808H
	DD	02c2c04H
	DD	0282c08H
	DD	0283008H
	DD	0243008H
	DD	0243408H
	DD	0203408H
	DD	020380cH
	DD	01c3c0cH
	DD	01c3c10H
	DD	0184010H
	DD	0184414H
	DD	0184418H
	DD	014481cH
	DD	0144c20H
	DD	0104c24H
	DD	0105028H
	DD	010542cH
	DD	0105430H
	DD	0c5834H
	DD	0c5c38H
	DD	0c603cH
	DD	0c6044H
	DD	086448H
	DD	08684cH
	DD	086854H
	DD	086c58H
	DD	087060H
	DD	087464H
	DD	087468H
	DD	087870H
	DD	087c74H
	DD	08807cH
	DD	048080H
	DD	088084H
	DD	08848cH
	DD	088890H
	DD	088c98H
	DD	088c9cH
	DD	0890a0H
	DD	0894a8H
	DD	0898acH
	DD	0898b4H
	DD	089cb8H
	DD	0ca0bcH
	DD	0ca0c4H
	DD	0ca4c8H
	DD	0ca8ccH
	DD	010acd0H
	DD	010acd4H
	DD	010b0d8H
	DD	010b4dcH
	DD	014b4e0H
	DD	014b8e4H
	DD	018bce8H
	DD	018bcecH
	DD	018c0f0H
	DD	01cc4f0H
	DD	01cc4f4H
	DD	020c8f4H
	DD	020ccf8H
	DD	024ccf8H
	DD	024d0f8H
	DD	028d0f8H
	DD	028d4f8H
	DD	02cd4fcH
	DD	02cd8f8H
	DD	030d8f8H
	DD	030dcf8H
	DD	034dcf8H
	DD	034e0f8H
	DD	038e0f4H
	DD	03ce4f4H
	DD	03ce4f0H
	DD	040e8f0H
	DD	044e8ecH
	DD	044e8e8H
	DD	048ece4H
	DD	04cece0H
	DD	04cf0dcH
	DD	050f0d8H
	DD	054f0d4H
	DD	054f0d0H
	DD	058f4ccH
	DD	05cf4c8H
	DD	060f4c4H
	DD	060f4bcH
	DD	064f8b8H
	DD	068f8b4H
	DD	068f8acH
	DD	06cf8a8H
	DD	070f8a0H
	DD	074f89cH
	DD	074f898H
	DD	078f890H
	DD	07cf88cH
	DD	080f884H
	DD	080fc80H
	DD	080f87cH
	DD	084f874H
	DD	088f870H
	DD	08cf868H
	DD	08cf864H
	DD	090f860H
	DD	094f858H
	DD	098f854H
	DD	098f84cH
	DD	09cf848H
	DD	0a0f444H
	DD	0a0f43cH
	DD	0a4f438H
	DD	0a8f434H
	DD	0acf030H
	DD	0acf02cH
	DD	0b0f028H
	DD	0b4f024H
	DD	0b4ec20H
	DD	0b8ec1cH
	DD	0bce818H
	DD	0bce814H
	DD	0c0e810H
	DD	0c4e410H
	DD	0c4e40cH
	DD	0c8e00cH
	DD	0cce008H
	DD	0ccdc08H
	DD	0d0dc08H
	DD	0d0d808H
	DD	0d4d808H
	DD	0d4d404H
	DD	0d8d408H
	DD	0d8d008H
	DD	0dcd008H
	DD	0dccc08H
	DD	0e0cc08H
	DD	0e0c80cH
	DD	0e4c40cH
	DD	0e4c410H
	DD	0e8c010H
	DD	0e8bc14H
	DD	0e8bc18H
	DD	0ecb81cH
	DD	0ecb420H
	DD	0f0b424H
	DD	0f0b028H
	DD	0f0ac2cH
	DD	0f0ac30H
	DD	0f4a834H
	DD	0f4a438H
	DD	0f4a03cH
	DD	0f4a044H
	DD	0f89c48H
	DD	0f8984cH
	DD	0f89854H
	DD	0f89458H
	DD	0f89060H
	DD	0f88c64H
	DD	0f88c68H
	DD	0f88870H
	DD	0f88474H
	DD	0f8807cH
	DD	0fc8080H
	DD	0f88084H
	DD	0f87c8cH
	DD	0f87890H
	DD	0f87498H
	DD	0f8749cH
	DD	0f870a0H
	DD	0f86ca8H
	DD	0f868acH
	DD	0f868b4H
	DD	0f864b8H
	DD	0f460bcH
	DD	0f460c4H
	DD	0f45cc8H
	DD	0f458ccH
	DD	0f054d0H
	DD	0f054d4H
	DD	0f050d8H
	DD	0f04cdcH
	DD	0ec4ce0H
	DD	0ec48e4H
	DD	0e844e8H
	DD	0e844ecH
	DD	0e840f0H
	DD	0e43cf0H
	DD	0e43cf4H
	DD	0e038f4H
	DD	0e034f8H
	DD	0dc34f8H
	DD	0dc30f8H
	DD	0d830f8H
	DD	0d82cf8H
	DD	0d42cfcH
	DD	0d428f8H
	DD	0d028f8H
	DD	0d024f8H
	DD	0cc24f8H
	DD	0cc20f8H
	DD	0c820f4H
	DD	0c41cf4H
	DD	0c41cf0H
	DD	0c018f0H
	DD	0bc18ecH
	DD	0bc18e8H
	DD	0b814e4H
	DD	0b414e0H
	DD	0b410dcH
	DD	0b010d8H
	DD	0ac10d4H
	DD	0ac10d0H
	DD	0a80cccH
	DD	0a40cc8H
	DD	0a00cc4H
	DD	0a00cbcH
	DD	09c08b8H
	DD	09808b4H
	DD	09808acH
	DD	09408a8H
	DD	09008a0H
	DD	08c089cH
	DD	08c0898H
	DD	0880890H
	DD	084088cH
	DD	0800884H
_pal_5	DD	00H
	DD	010101H
	DD	010101H
	DD	010101H
	DD	010101H
	DD	030201H
	DD	030201H
	DD	040301H
	DD	040301H
	DD	040301H
	DD	060401H
	DD	060401H
	DD	070501H
	DD	090601H
	DD	090601H
	DD	090601H
	DD	0a0701H
	DD	0a0701H
	DD	0b0801H
	DD	0d0901H
	DD	0d0901H
	DD	0e0a01H
	DD	0100b01H
	DD	0100b01H
	DD	0110c01H
	DD	0110c01H
	DD	0130d01H
	DD	0140e01H
	DD	0150f01H
	DD	0171001H
	DD	0171001H
	DD	0171001H
	DD	0181101H
	DD	01a1201H
	DD	01b1301H
	DD	01d1401H
	DD	01e1501H
	DD	0201601H
	DD	0211701H
	DD	0211701H
	DD	0221801H
	DD	0241901H
	DD	0241901H
	DD	0251a01H
	DD	0271b01H
	DD	0281c01H
	DD	02a1d01H
	DD	02b1e01H
	DD	02b1e01H
	DD	02c1f01H
	DD	02e2001H
	DD	02f2101H
	DD	0312201H
	DD	0322301H
	DD	0342401H
	DD	0352501H
	DD	0382701H
	DD	0392801H
	DD	03b2901H
	DD	03c2a01H
	DD	03c2a01H
	DD	03e2b01H
	DD	03f2b00H
	DD	0412d02H
	DD	0422e03H
	DD	0432f04H
	DD	0443005H
	DD	0453106H
	DD	0463207H
	DD	0483409H
	DD	049350aH
	DD	04a360bH
	DD	04b370cH
	DD	04c380dH
	DD	04e3a0fH
	DD	04f3b10H
	DD	0503c11H
	DD	0513d12H
	DD	0533f14H
	DD	0533f14H
	DD	0544015H
	DD	0554116H
	DD	0574318H
	DD	0584419H
	DD	059451aH
	DD	05a461bH
	DD	05c481dH
	DD	05d491eH
	DD	05e4a1fH
	DD	05f4b20H
	DD	0604c21H
	DD	0614d22H
	DD	0634f24H
	DD	0645025H
	DD	0655126H
	DD	0665227H
	DD	0685429H
	DD	069552aH
	DD	06a562bH
	DD	06c582dH
	DD	06d592eH
	DD	06e5a2fH
	DD	0705c31H
	DD	0715d32H
	DD	0725e33H
	DD	0746035H
	DD	0756136H
	DD	0766237H
	DD	0786439H
	DD	079653aH
	DD	07a663bH
	DD	07c683dH
	DD	07d693eH
	DD	07e6a3fH
	DD	0806c41H
	DD	0816d42H
	DD	0826e43H
	DD	0847045H
	DD	0857146H
	DD	0887449H
	DD	089754aH
	DD	08a764bH
	DD	08b774cH
	DD	08d794eH
	DD	08e7a4fH
	DD	0907c51H
	DD	0907c51H
	DD	0917d52H
	DD	0937f54H
	DD	0948055H
	DD	0958156H
	DD	0978358H
	DD	0988459H
	DD	099855aH
	DD	09a865bH
	DD	09c885dH
	DD	09d895eH
	DD	09e8a5fH
	DD	0a08c61H
	DD	0a18d62H
	DD	0a38f64H
	DD	0a59166H
	DD	0a69267H
	DD	0a79368H
	DD	0a9956aH
	DD	0aa966bH
	DD	0ab976cH
	DD	0ac986dH
	DD	0ae9a6fH
	DD	0af9b70H
	DD	0b09c71H
	DD	0b29e73H
	DD	0b39f74H
	DD	0b4a075H
	DD	0b5a176H
	DD	0b8a479H
	DD	0b9a57aH
	DD	0baa67bH
	DD	0bba77cH
	DD	0bda97eH
	DD	0beaa7fH
	DD	0bfab80H
	DD	0c0ac81H
	DD	0c1ad82H
	DD	0c2ae83H
	DD	0c3af84H
	DD	0c4b085H
	DD	0c5b186H
	DD	0c6b287H
	DD	0c9b58aH
	DD	0cab68bH
	DD	0cbb78cH
	DD	0ccb88dH
	DD	0cdb98eH
	DD	0ceba8fH
	DD	0d0bc91H
	DD	0d1bd92H
	DD	0d2be93H
	DD	0d3bf94H
	DD	0d4c095H
	DD	0d5c196H
	DD	0d7c398H
	DD	0d8c499H
	DD	0d9c59aH
	DD	0dac69bH
	DD	0dbc79cH
	DD	0dcc89dH
	DD	0ddc99eH
	DD	0dfcba0H
	DD	0e0cca1H
	DD	0e1cda2H
	DD	0e2cea3H
	DD	0e3cfa4H
	DD	0e5d1a6H
	DD	0e6d2a7H
	DD	0e7d3a8H
	DD	0e7d3a8H
	DD	0e8d4a9H
	DD	0e9d5aaH
	DD	0ead6abH
	DD	0ebd7acH
	DD	0ecd8adH
	DD	0edd9aeH
	DD	0eedaafH
	DD	0efdbb0H
	DD	0f0dcb1H
	DD	0f0dcb1H
	DD	0f2deb3H
	DD	0f3dfb4H
	DD	0f4e0b5H
	DD	0f4e0b5H
	DD	0f4e0b5H
	DD	0f5e1b6H
	DD	0f6e2b7H
	DD	0f7e3b8H
	DD	0f7e3b8H
	DD	0f8e4b9H
	DD	0f9e5baH
	DD	0fae6bbH
	DD	0fae6bbH
	DD	0fbe7bcH
	DD	0fde9beH
	DD	0fde9beH
	DD	0feeabfH
	DD	0ffebc0H
	DD	0ffebc0H
	DD	0ffedc4H
	DD	0ffedc4H
	DD	0ffeec8H
	DD	0ffeec8H
	DD	0ffefcbH
	DD	0fff0ceH
	DD	0fff0ceH
	DD	0fff1d2H
	DD	0fff1d2H
	DD	0fff1d2H
	DD	0fff2d5H
	DD	0fff2d5H
	DD	0fff3d8H
	DD	0fff3d8H
	DD	0fff5dfH
	DD	0fff5dfH
	DD	0fff5dfH
	DD	0fff6e2H
	DD	0fff6e2H
	DD	0fff6e2H
	DD	0fff7e5H
	DD	0fff7e5H
	DD	0fff7e5H
	DD	0fff7e5H
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff9ecH
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff8e9H
	DD	0fff7e5H
	DD	0fff6e2H
	DD	0fff6e2H
	DD	0fff5dfH
	DD	0fff3d8H
	DD	0fff2d5H
	DD	0fff1d2H
	DD	0fff0ceH
	DD	0ffeec8H
	DD	0ffedc4H
	DD	0ffebc0H
	DD	0fde9beH
	DD	0fbe7bcH
	DD	0f9e5baH
	DD	0f7e3b8H
	DD	0f5e1b6H
	DD	0f4e0b5H
	DD	0f3dfb4H
	DD	0f0dcb1H
	DD	0eedaafH
	DD	0ecd8adH
	DD	0ead6abH
	DD	0e8d4a9H
	DD	0e5d1a6H
	DD	0e2cea3H
	DD	0e0cca1H
	DD	0ddc99eH
	DD	0dbc79cH
	DD	0d8c499H
	DD	0d5c196H
	DD	0d2be93H
	DD	0d0bc91H
	DD	0cdb98eH
	DD	0cab68bH
	DD	0c8b489H
	DD	0c4b085H
	DD	0c2ae83H
	DD	0bfab80H
	DD	0bca87dH
	DD	0baa67bH
	DD	0b6a277H
	DD	0b39f74H
	DD	0b09c71H
	DD	0ad996eH
	DD	0aa966bH
	DD	0a79368H
	DD	0a49065H
	DD	0a08c61H
	DD	09d895eH
	DD	09a865bH
	DD	0978358H
	DD	0937f54H
	DD	0907c51H
	DD	08e7a4fH
	DD	08b774cH
	DD	0887449H
	DD	0847045H
	DD	0816d42H
	DD	07e6a3fH
	DD	07b673cH
	DD	0776338H
	DD	0746035H
	DD	0715d32H
	DD	06e5a2fH
	DD	06b572cH
	DD	0685429H
	DD	0655126H
	DD	0624e23H
	DD	05f4b20H
	DD	05d491eH
	DD	05a461bH
	DD	0574318H
	DD	0544015H
	DD	0523e13H
	DD	04f3b10H
	DD	04c380dH
	DD	049350aH
	DD	0473308H
	DD	0443005H
	DD	0412d02H
	DD	03e2b01H
	DD	03c2a01H
	DD	0382701H
	DD	0352501H
	DD	0312201H
	DD	02e2001H
	DD	02b1e01H
	DD	0281c01H
	DD	0251a01H
	DD	0221801H
	DD	0211701H
	DD	01e1501H
	DD	01b1301H
	DD	0181101H
	DD	0171001H
	DD	0140e01H
	DD	0110c01H
	DD	0100b01H
	DD	0d0901H
	DD	0b0801H
	DD	090601H
	DD	090601H
	DD	060401H
	DD	040301H
	DD	030201H
	DD	010101H
	DD	010101H
_pal_6	DD	00H
	DD	0b8a074H
	DD	0bca478H
	DD	0c0a878H
	DD	0c8ac7cH
	DD	0ccb07cH
	DD	0d0b480H
	DD	0d8bc84H
	DD	0dcc088H
	DD	0e0c488H
	DD	0e8c88cH
	DD	0eccc8cH
	DD	0ecc488H
	DD	0e8c084H
	DD	0e8bc80H
	DD	0e8b880H
	DD	0e8b47cH
	DD	0e4b07cH
	DD	0e4ac78H
	DD	0e4ac78H
	DD	0e4a874H
	DD	0e4a474H
	DD	0e0a070H
	DD	0e09c70H
	DD	0e0986cH
	DD	0e0946cH
	DD	0dc9468H
	DD	0dc9068H
	DD	0dc8c64H
	DD	0dc8864H
	DD	0dc8460H
	DD	0d88060H
	DD	0d8805cH
	DD	0d87c5cH
	DD	0d87858H
	DD	0d87454H
	DD	0d47054H
	DD	0d46c50H
	DD	0d0684cH
	DD	0cc684cH
	DD	0c8684cH
	DD	0c8644cH
	DD	0c4644cH
	DD	0c0644cH
	DD	0c06048H
	DD	0bc6048H
	DD	0b86048H
	DD	0b85c48H
	DD	0b45c48H
	DD	0b05c48H
	DD	0ac5844H
	DD	0ac5844H
	DD	0a85844H
	DD	0a45444H
	DD	0a45444H
	DD	0a05444H
	DD	09c5040H
	DD	09c5040H
	DD	0985040H
	DD	0944c40H
	DD	0944c40H
	DD	0904c40H
	DD	08c483cH
	DD	088483cH
	DD	088483cH
	DD	084443cH
	DD	080443cH
	DD	080443cH
	DD	0784038H
	DD	0743c38H
	DD	06c3c34H
	DD	0683834H
	DD	0643430H
	DD	05c3430H
	DD	058302cH
	DD	0542c2cH
	DD	04c2c28H
	DD	0482828H
	DD	0402824H
	DD	03c2424H
	DD	0382020H
	DD	0302020H
	DD	02c1c1cH
	DD	028181cH
	DD	0201818H
	DD	01c1418H
	DD	0181418H
	DD	01c1818H
	DD	0201c1cH
	DD	024201cH
	DD	0282420H
	DD	02c2824H
	DD	0302c28H
	DD	038302cH
	DD	03c342cH
	DD	0403830H
	DD	0443c34H
	DD	0484038H
	DD	050443cH
	DD	050443cH
	DD	050483cH
	DD	050483cH
	DD	0504c40H
	DD	0504c40H
	DD	0505040H
	DD	0545444H
	DD	0545844H
	DD	0545c48H
	DD	050604cH
	DD	04c6450H
	DD	0486854H
	DD	0446c58H
	DD	040705cH
	DD	03c7864H
	DD	0307c6cH
	DD	0347c68H
	DD	03c8064H
	DD	0448460H
	DD	0488860H
	DD	0508c5cH
	DD	0588c58H
	DD	0609054H
	DD	0649454H
	DD	06c9850H
	DD	0749c4cH
	DD	080a048H
	DD	08ca448H
	DD	098a844H
	DD	0a4ac44H
	DD	0b0b040H
	DD	0bcb440H
	DD	0ccb840H
	DD	0dcbc40H
	DD	0e8c03cH
	DD	0f8c43cH
	DD	0f8c444H
	DD	0f8cc50H
	DD	0f8cc58H
	DD	0f8d468H
	DD	0f4cc64H
	DD	0f4c860H
	DD	0f4c45cH
	DD	0f4c05cH
	DD	0f4bc58H
	DD	0f4b454H
	DD	0f0b050H
	DD	0ecac50H
	DD	0eca84cH
	DD	0e8a44cH
	DD	0e8a04cH
	DD	0e49c48H
	DD	0e49848H
	DD	0e09448H
	DD	0dc9044H
	DD	0dc8c44H
	DD	0d88844H
	DD	0d88440H
	DD	0d48040H
	DD	0d47c40H
	DD	0d0783cH
	DD	0d0743cH
	DD	0cc703cH
	DD	0c86c38H
	DD	0c86838H
	DD	0c46434H
	DD	0c46034H
	DD	0c05c34H
	DD	0c05830H
	DD	0bc5430H
	DD	0bc5030H
	DD	0b84c2cH
	DD	0b4482cH
	DD	0b4442cH
	DD	0b04028H
	DD	0b03c28H
	DD	0ac3828H
	DD	0ac3424H
	DD	0a83024H
	DD	0a02c24H
	DD	0982c28H
	DD	0942c28H
	DD	08c282cH
	DD	088282cH
	DD	0802830H
	DD	07c2430H
	DD	0742434H
	DD	0702438H
	DD	06c2434H
	DD	0682434H
	DD	0642434H
	DD	0602030H
	DD	05c2030H
	DD	05c2030H
	DD	058202cH
	DD	054202cH
	DD	050202cH
	DD	04c2028H
	DD	04c2028H
	DD	0482028H
	DD	0441c24H
	DD	0401c24H
	DD	03c1c24H
	DD	0381c20H
	DD	0381c20H
	DD	0341c20H
	DD	0301c1cH
	DD	02c1c1cH
	DD	0281c1cH
	DD	0281c1cH
	DD	0281c18H
	DD	0281c14H
	DD	0281c14H
	DD	02c1c18H
	DD	02c2018H
	DD	02c201cH
	DD	030201cH
	DD	030201cH
	DD	030201cH
	DD	0342420H
	DD	0342420H
	DD	0342420H
	DD	0382824H
	DD	0382824H
	DD	03c2c28H
	DD	03c3028H
	DD	040302cH
	DD	040342cH
	DD	0443430H
	DD	0443830H
	DD	0483c34H
	DD	0483c34H
	DD	04c4038H
	DD	04c4038H
	DD	050443cH
	DD	050483cH
	DD	0544840H
	DD	0544c40H
	DD	0584c44H
	DD	0585044H
	DD	05c5448H
	DD	05c5448H
	DD	060584cH
	DD	0645c50H
	DD	06c6054H
	DD	0706454H
	DD	0746858H
	DD	07c6c58H
	DD	080705cH
	DD	0887860H
	DD	08c7c60H
	DD	0908064H
	DD	0988464H
	DD	09c8868H
	DD	0a08c6cH
	DD	0a8906cH
	DD	0ac9470H
_pal_7	DD	00H
	DD	030100H
	DD	0c0201H
	DD	01c0503H
	DD	0320806H
	DD	04d0e0aH
	DD	073140fH
	DD	09e1a13H
	DD	0cc2318H
	DD	0ff2b20H
	DD	0ff3827H
	DD	0ff4430H
	DD	0ff513bH
	DD	0ff6146H
	DD	0ff7051H
	DD	0ff825eH
	DD	0ff946bH
	DD	0ffa87cH
	DD	0ffaf7fH
	DD	0ff9b70H
	DD	0ff8863H
	DD	0ff7956H
	DD	0ff6b4dH
	DD	0ff5c42H
	DD	0ff4d38H
	DD	0ff4230H
	DD	0ff3627H
	DD	0ff2d20H
	DD	0c52117H
	DD	0881611H
	DD	058100bH
	DD	0340906H
	DD	0180403H
	DD	080101H
	DD	00H
	DD	010101H
	DD	060607H
	DD	0f0f11H
	DD	01c1d20H
	DD	02d2f32H
	DD	0404249H
	DD	0565861H
	DD	063666dH
	DD	0737582H
	DD	0828591H
	DD	09197a5H
	DD	0a5a8b5H
	DD	0b5bcccH
	DD	0ccd3e2H
	DD	0dee6fbH
	DD	0f7fbffH
	DD	0ffffffH
	DD	0ffffffH
	DD	0ffffffH
	DD	0ffffffH
	DD	0ffffffH
	DD	0ffffffH
	DD	0f3fbffH
	DD	0dae2f7H
	DD	0c8ccdeH
	DD	0b2b9c8H
	DD	09ea5b2H
	DD	08e919eH
	DD	07c7f8bH
	DD	06b7079H
	DD	05e6168H
	DD	04d4f56H
	DD	0393b40H
	DD	029292fH
	DD	01c1c1eH
	DD	0111112H
	DD	080808H
	DD	020202H
	DD	00H
	DD	01H
	DD	010108H
	DD	030312H
	DD	050620H
	DD	080934H
	DD	0b0e4bH
	DD	011136bH
	DD	015188bH
	DD	01c20b2H
	DD	02127daH
	DD	02930ffH
	DD	0343bffH
	DD	03b46ffH
	DD	04651ffH
	DD	0515effH
	DD	0616dffH
	DD	06b7cffH
	DD	0798bffH
	DD	0889effH
	DD	08294ffH
	DD	07082ffH
	DD	06373ffH
	DD	05663ffH
	DD	04b54ffH
	DD	03d49ffH
	DD	0343bffH
	DD	02930ffH
	DD	02126daH
	DD	01a1ea8H
	DD	013167cH
	DD	0e1056H
	DD	090a39H
	DD	050621H
	DD	020311H
	DD	010104H
	DD	00H
	DD	010100H
	DD	080601H
	DD	0130f02H
	DD	0241c05H
	DD	0382d08H
	DD	051400bH
	DD	0705810H
	DD	0947514H
	DD	0bc941aH
	DD	0ebb920H
	DD	0ffe227H
	DD	0ffff2fH
	DD	0ffff38H
	DD	0ffff42H
	DD	0ffff4bH
	DD	0ffff54H
	DD	0ffff61H
	DD	0ffff6dH
	DD	0ffff79H
	DD	0ffff6dH
	DD	0ffff61H
	DD	0ffff54H
	DD	0ffff49H
	DD	0ffff40H
	DD	0ffff36H
	DD	0ffff2dH
	DD	0ffd724H
	DD	0daaf1eH
	DD	0ab8817H
	DD	0826612H
	DD	05e4b0cH
	DD	03d3008H
	DD	0261e05H
	DD	0141002H
	DD	080601H
	DD	010100H
	DD	0100H
	DD	010600H
	DD	031000H
	DD	071e00H
	DD	0b3601H
	DD	0114f01H
	DD	0176d01H
	DD	01e9101H
	DD	027b902H
	DD	032eb02H
	DD	03dff03H
	DD	04bff04H
	DD	05cff04H
	DD	06bff06H
	DD	07fff06H
	DD	091ff07H
	DD	0a5ff08H
	DD	0bcff09H
	DD	0d3ff0bH
	DD	0cfff0aH
	DD	0b9ff09H
	DD	0a5ff08H
	DD	091ff07H
	DD	07fff06H
	DD	06dff06H
	DD	05eff04H
	DD	04fff04H
	DD	040ff03H
	DD	034f702H
	DD	02bc802H
	DD	0219e02H
	DD	01a7901H
	DD	0125401H
	DD	0c3901H
	DD	082400H
	DD	041400H
	DD	020800H
	DD	0100H
	DD	00H
	DD	0106H
	DD	0313H
	DD	0829H
	DD	0e46H
	DD	0146bH
	DD	01c94H
	DD	026c8H
	DD	030ffH
	DD	03dffH
	DD	04bffH
	DD	058ffH
	DD	06bffH
	DD	07fffH
	DD	091ffH
	DD	0a5ffH
	DD	0b9ffH
	DD	0c5ffH
	DD	0afffH
	DD	097ffH
	DD	082ffH
	DD	06dffH
	DD	05cffH
	DD	04bffH
	DD	03bffH
	DD	030ffH
	DD	024c1H
	DD	01888H
	DD	0115cH
	DD	0b38H
	DD	061dH
	DD	020aH
	DD	01H
	DD	010000H
	DD	080200H
	DD	0160700H
	DD	02f0f01H
	DD	04d1701H
	DD	0702301H
	DD	09e3002H
	DD	0cf4003H
	DD	0ff5103H
	DD	0ff6604H
	DD	0ff7c06H
	DD	0ff9406H
	DD	0ffb208H
	DD	0ffcf09H
	DD	0ffef0aH
	DD	0ffff0bH
	DD	0ffff0eH
	DD	0ffff0cH
	DD	0ffff0bH
	DD	0ffeb0aH
	DD	0ffd309H
	DD	0ffb908H
	DD	0ffa207H
	DD	0ff8e06H
	DD	0ff7905H
	DD	0ff6804H
	DD	0ff5604H
	DD	0eb4903H
	DD	0bc3902H
	DD	0972f02H
	DD	0732301H
	DD	0511801H
	DD	0381201H
	DD	0240b00H
	DD	0140600H
	DD	080200H
	DD	010000H
	DD	00H
	DD	060101H
	DD	0140504H
	DD	02d0b09H
	DD	04b1410H
	DD	0701e17H
	DD	09e2b20H
	DD	0d7392bH
	DD	0ff4b39H
	DD	0ff5e49H
	DD	0ff7358H
	DD	0ff8b6bH
	DD	0ffa57fH
	DD	0ffc597H
	DD	0ffe2afH
	DD	0ffffc8H
	DD	0ffffccH
	DD	0ffe2afH
	DD	0ffc194H
	DD	0ffa57cH
	DD	0ff8868H
	DD	0ff6d54H
	DD	0ff5642H
	DD	0fb4232H
	DD	0b93226H
	DD	082231aH
	DD	0541612H
	DD	02f0c09H
	DD	0150604H
	DD	060201H
	DD	00H
	DD	020103H
	DD	08020bH
	DD	0120518H
	DD	020092bH
	DD	0300f44H
	DD	0491563H
	DD	0631d88H
	DD	08226afH
	DD	0a22fdeH
	DD	0c839ffH
	DD	0f746ffH
	DD	0ff54ffH
	DD	0ff63ffH
	DD	0ff73ffH
	DD	0ff85ffH
	DD	0ff97ffH
	DD	0ffabffH
	DD	0ffc1ffH
	DD	0ffd3ffH
	DD	0ffdeffH
	DD	0ffc8ffH
	DD	0ffb5ffH
	DD	0ffa2ffH
	DD	0ff8effH
	DD	0ff79ffH
	DD	0ff6bffH
	DD	0ff5cffH
	DD	0ff4dffH
	DD	0d73dffH
	DD	0af32f3H
	DD	08b29c1H
	DD	06b2094H
	DD	04f176dH
	DD	036104bH
	DD	0230a30H
	DD	014061cH
	DD	09020cH
	DD	020103H
	DD	00H
	DD	020100H
	DD	080400H
	DD	0130800H
	DD	0241100H
	DD	0381800H
	DD	04f2300H
	DD	06b3000H
	DD	08b3d00H
	DD	0b55100H
	DD	0de6300H
	DD	0ff7900H
	DD	0ff8e00H
	DD	0ffa500H
	DD	0ffc500H
	DD	0ffde00H
	DD	0ffff00H
	DD	0ffff00H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff01H
	DD	0ffff00H
	DD	0ffff00H
	DD	0ffd700H
	DD	0ffb500H
	DD	0ff9700H
	DD	0ff7c00H
	DD	0da6300H
	DD	0ab4d00H
	DD	07f3900H
	DD	05c2900H
	DD	03d1c00H
	DD	0231000H
	DD	0120800H
	DD	060200H
	DD	00H
	DD	010000H
	DD	050000H
	DD	0c0000H
	DD	0170000H
	DD	0260000H
	DD	0390000H
	DD	04f0000H
	DD	0630000H
	DD	0730000H
	DD	0850000H
	DD	09b0000H
	DD	0af0000H
	DD	0c50000H
	DD	0da0000H
	DD	0f70101H
	DD	0ff0101H
	DD	0ff0101H
	DD	0ff0101H
	DD	0ff0101H
	DD	0ff0101H
	DD	0ff0101H
	DD	0f70101H
	DD	0da0000H
	DD	0c50000H
	DD	0a80000H
	DD	0910000H
	DD	07c0000H
	DD	0680000H
	DD	0560000H
	DD	0440000H
	DD	0340000H
	DD	0270000H
	DD	01c0000H
	DD	0120000H
	DD	0a0000H
	DD	040000H
	DD	010000H
_cur_user_palette_size DD 04000H
_pal_8	DD	00H
	DD	0288834H
	DD	01c6814H
	DD	0205820H
	DD	0244820H
	DD	0304024H
	DD	03c3828H
	DD	04c342cH
	DD	0583028H
	DD	0682c28H
	DD	03c2828H
	DD	0842828H
	DD	0c2828H
	DD	08c2828H
	DD	0182828H
	DD	0182828H
	DD	0a42828H
	DD	0782828H
	DD	0442828H
	DD	0502828H
	DD	0582828H
	DD	0682828H
	DD	0782828H
	DD	08c2828H
	DD	0942828H
	DD	09c2828H
	DD	0a42828H
	DD	0b02828H
	DD	0b82828H
	DD	0c42828H
	DD	0d42828H
	DD	0e02828H
	DD	0e02828H
	DD	0e02c28H
	DD	0e02c2cH
	DD	0e0302cH
	DD	0e0302cH
	DD	0e03430H
	DD	0e43830H
	DD	0e43830H
	DD	0e43c34H
	DD	0e43c34H
	DD	0e44034H
	DD	0e44038H
	DD	0e44438H
	DD	0e8483cH
	DD	0e8483cH
	DD	0e84c3cH
	DD	0e84c40H
	DD	0e85040H
	DD	0e85040H
	DD	0e85444H
	DD	0e85444H
	DD	0ec5844H
	DD	0ec5c48H
	DD	0ec5c48H
	DD	0ec6048H
	DD	0ec604cH
	DD	0ec644cH
	DD	0f06850H
	DD	0f07054H
	DD	0f07458H
	DD	0f07c58H
	DD	0f0805cH
	DD	0f08860H
	DD	0f08c64H
	DD	0f09068H
	DD	0ec986cH
	DD	0ec9c70H
	DD	0eca470H
	DD	0eca874H
	DD	0ecac78H
	DD	0ecb47cH
	DD	0ecb880H
	DD	0ecc084H
	DD	0ecc488H
	DD	0eccc8cH
	DD	0e8c88cH
	DD	0e0c488H
	DD	0dcc088H
	DD	0d8bc84H
	DD	0d0b480H
	DD	0ccb07cH
	DD	0c8ac7cH
	DD	0c0a878H
	DD	0bca478H
	DD	0b8a074H
	DD	0b09c70H
	DD	0ac9470H
	DD	0a8906cH
	DD	0a08c6cH
	DD	09c8868H
	DD	0988464H
	DD	0908064H
	DD	08c7c60H
	DD	0887860H
	DD	080705cH
	DD	07c6c58H
	DD	0746858H
	DD	0706454H
	DD	06c6054H
	DD	0645c50H
	DD	0605850H
	DD	05c544cH
	DD	0544c48H
	DD	0504848H
	DD	04c4444H
	DD	0484044H
	DD	0403c40H
	DD	03c383cH
	DD	038343cH
	DD	0303038H
	DD	02c2838H
	DD	0282434H
	DD	0202030H
	DD	01c1c30H
	DD	018182cH
	DD	010142cH
	DD	0c1028H
	DD	080c28H
	DD	040828H
	DD	040828H
	DD	040828H
	DD	080c28H
	DD	0c1028H
	DD	0101428H
	DD	0101828H
	DD	0141c28H
	DD	0182028H
	DD	01c2428H
	DD	0202828H
	DD	0242c28H
	DD	0243028H
	DD	0283428H
	DD	02c3828H
	DD	0202c20H
	DD	0182018H
	DD	0c0c08H
	DD	0100c08H
	DD	0180c08H
	DD	0201008H
	DD	0281008H
	DD	0301008H
	DD	0381408H
	DD	03c1408H
	DD	0441408H
	DD	04c1408H
	DD	0541808H
	DD	05c1808H
	DD	0641808H
	DD	06c1c08H
	DD	0701c08H
	DD	0782008H
	DD	0802008H
	DD	0882008H
	DD	0902408H
	DD	0982408H
	DD	0a02408H
	DD	0a42808H
	DD	0ac2808H
	DD	0b42808H
	DD	0bc2c08H
	DD	0c42c08H
	DD	0cc2c08H
	DD	0d43008H
	DD	0d83008H
	DD	0dc3004H
	DD	0e42c04H
	DD	0e82c00H
	DD	0ec2c00H
	DD	0f42c00H
	DD	0f43004H
	DD	0f43408H
	DD	0f43808H
	DD	0f43c0cH
	DD	0f44410H
	DD	0f44814H
	DD	0f44c14H
	DD	0f45018H
	DD	0f4541cH
	DD	0f45c1cH
	DD	0f46020H
	DD	0f46424H
	DD	0f46828H
	DD	0f46c28H
	DD	0f4742cH
	DD	0f47830H
	DD	0f47c34H
	DD	0f48034H
	DD	0f48438H
	DD	0f48c3cH
	DD	0f4903cH
	DD	0f49440H
	DD	0f49844H
	DD	0f49c48H
	DD	0f4a448H
	DD	0f4a84cH
	DD	0f4ac50H
	DD	0f4b050H
	DD	0f4b454H
	DD	0f4bc58H
	DD	0f4c05cH
	DD	0f4c45cH
	DD	0f4c860H
	DD	0f4cc64H
	DD	0f8d468H
	DD	0f8cc58H
	DD	0f8cc50H
	DD	0f8c444H
	DD	0f8c43cH
	DD	0f8c434H
	DD	0f8c028H
	DD	0f8c018H
	DD	0f8b810H
	DD	0f8b80cH
	DD	0f8b408H
	DD	0f8b404H
	DD	0f8b004H
	DD	0f8b008H
	DD	0f8a80cH
	DD	0f8a810H
	DD	0f8a418H
	DD	0f8a440H
	DD	0ec9c3cH
	DD	0e4983cH
	DD	0dc943cH
	DD	0d48c3cH
	DD	0cc883cH
	DD	0c48038H
	DD	0bc7c38H
	DD	0b47838H
	DD	0ac7438H
	DD	0a47038H
	DD	09c6c38H
	DD	0946838H
	DD	08c6438H
	DD	0886034H
	DD	0805834H
	DD	0785434H
	DD	0705038H
	DD	0684c38H
	DD	064483cH
	DD	05c443cH
	DD	054403cH
	DD	04c3c40H
	DD	0483840H
	DD	0403444H
	DD	0383044H
	DD	0302c44H
	DD	02c2848H
	DD	0242448H
	DD	01c204cH
	DD	0141c4cH
	DD	0101850H
	DD	0141c54H
	DD	01c1c28H
_pal_9	DD	00H
	DD	040404H
	DD	0c0c0cH
	DD	0101414H
	DD	0181c1cH
	DD	01c2824H
	DD	0243028H
	DD	0283830H
	DD	0304038H
	DD	034483cH
	DD	03c5044H
	DD	0445848H
	DD	04c6050H
	DD	0506854H
	DD	058705cH
	DD	0607860H
	DD	0688068H
	DD	070886cH
	DD	0789070H
	DD	0809878H
	DD	088a07cH
	DD	090a880H
	DD	09cb084H
	DD	0a4b88cH
	DD	0acc090H
	DD	0b4c894H
	DD	0c0cc9cH
	DD	0c8d4a0H
	DD	0d4d8a8H
	DD	0dce0acH
	DD	0e4e4b4H
	DD	0f0ecb8H
	DD	0f4ecd0H
	DD	0ece4ccH
	DD	0e4dcc4H
	DD	0e0d4bcH
	DD	0d8c8b8H
	DD	0d0c0b0H
	DD	0c8b8acH
	DD	0c0b0a4H
	DD	0b8a8a0H
	DD	0b0a098H
	DD	0a89890H
	DD	0a0908cH
	DD	0988884H
	DD	0908080H
	DD	0887878H
	DD	0807070H
	DD	078686cH
	DD	0706064H
	DD	068585cH
	DD	0605058H
	DD	0584850H
	DD	0504448H
	DD	0483c44H
	DD	040343cH
	DD	0342c34H
	DD	02c282cH
	DD	0242024H
	DD	01c181cH
	DD	0141414H
	DD	0c0c0cH
	DD	040404H
	DD	00H
	DD	00H
	DD	040408H
	DD	0c0c10H
	DD	0141018H
	DD	01c1820H
	DD	0201c28H
	DD	0282430H
	DD	02c2c38H
	DD	0343040H
	DD	03c3848H
	DD	0404050H
	DD	0484858H
	DD	04c4c60H
	DD	0505468H
	DD	0585c70H
	DD	05c6478H
	DD	0646c80H
	DD	0687488H
	DD	06c8090H
	DD	0748898H
	DD	07890a0H
	DD	07c98a8H
	DD	084a0acH
	DD	088acb4H
	DD	090b4b8H
	DD	094bcc0H
	DD	09cc8c8H
	DD	0a0d0ccH
	DD	0a8dcd0H
	DD	0ace4d8H
	DD	0b4ecdcH
	DD	0bcf8e0H
	DD	0d4f8e8H
	DD	0ccf0e0H
	DD	0c8e8d8H
	DD	0c0e0ccH
	DD	0bcd8c4H
	DD	0b4d0bcH
	DD	0acc8b4H
	DD	0a8c0acH
	DD	0a0b8a4H
	DD	09cb09cH
	DD	094a894H
	DD	090a08cH
	DD	0889884H
	DD	084907cH
	DD	07c8874H
	DD	074806cH
	DD	0707864H
	DD	0687060H
	DD	0606858H
	DD	0586050H
	DD	0545448H
	DD	04c4c44H
	DD	044443cH
	DD	03c3c34H
	DD	034342cH
	DD	02c2c28H
	DD	0242420H
	DD	01c1c18H
	DD	0141414H
	DD	0100c0cH
	DD	080404H
	DD	00H
	DD	00H
	DD	080404H
	DD	0100c0cH
	DD	0181410H
	DD	0201818H
	DD	0282020H
	DD	0302424H
	DD	0382c2cH
	DD	0403034H
	DD	048383cH
	DD	0503c44H
	DD	0584448H
	DD	0604850H
	DD	0685058H
	DD	0705460H
	DD	078586cH
	DD	0806074H
	DD	084647cH
	DD	08c6c84H
	DD	094708cH
	DD	09c7898H
	DD	0a07ca0H
	DD	0a884a8H
	DD	0ac88b0H
	DD	0b490bcH
	DD	0b894c4H
	DD	0c09cccH
	DD	0c4a4d8H
	DD	0c8a8e0H
	DD	0ccb0e8H
	DD	0d4b8f0H
	DD	0d8c0f8H
	DD	0e0d8f8H
	DD	0d8d0f0H
	DD	0d0cce8H
	DD	0c8c4e0H
	DD	0c0c0d8H
	DD	0b8b8d0H
	DD	0b0b4c8H
	DD	0a8acc0H
	DD	0a0a4b8H
	DD	098a0b0H
	DD	09098a8H
	DD	08894a0H
	DD	0808c98H
	DD	0788490H
	DD	0748088H
	DD	06c787cH
	DD	0647074H
	DD	05c6c6cH
	DD	0586464H
	DD	0505c5cH
	DD	0485454H
	DD	0444c4cH
	DD	03c4444H
	DD	0343c3cH
	DD	02c3434H
	DD	028302cH
	DD	0202824H
	DD	018201cH
	DD	0141814H
	DD	0c100cH
	DD	040804H
	DD	00H
	DD	00H
	DD	040804H
	DD	0c100cH
	DD	0101810H
	DD	0182018H
	DD	0202820H
	DD	0283024H
	DD	030382cH
	DD	0344030H
	DD	03c4834H
	DD	044503cH
	DD	04c5840H
	DD	0546048H
	DD	05c644cH
	DD	0686c54H
	DD	0707458H
	DD	0787c60H
	DD	0808064H
	DD	088886cH
	DD	0949070H
	DD	09c9478H
	DD	0a49c7cH
	DD	0aca084H
	DD	0b8a488H
	DD	0c0ac90H
	DD	0c8b098H
	DD	0d0b4a0H
	DD	0d8bca8H
	DD	0e0c0b0H
	DD	0e8c4b8H
	DD	0f0c8c0H
	DD	0f8ccc8H
	DD	0f8dcdcH
	DD	0f0d4d4H
	DD	0e8ccd0H
	DD	0e0c4c8H
	DD	0d8bcc4H
	DD	0d0b4bcH
	DD	0c8acb8H
	DD	0c0a4b0H
	DD	0b89cacH
	DD	0b094a4H
	DD	0a88c9cH
	DD	09c8898H
	DD	0948090H
	DD	08c7888H
	DD	0847084H
	DD	07c6c7cH
	DD	0746474H
	DD	06c5c6cH
	DD	0645864H
	DD	05c505cH
	DD	0504858H
	DD	0484450H
	DD	0403c48H
	DD	0383440H
	DD	0343038H
	DD	02c2830H
	DD	0242028H
	DD	01c1c20H
	DD	0141418H
	DD	0c0c10H
	DD	040408H
	DD	00H
_pal_10	DD	00H
	DD	040000H
	DD	0c0000H
	DD	0140000H
	DD	01c0000H
	DD	0240000H
	DD	02c0000H
	DD	0340000H
	DD	03c0000H
	DD	0440000H
	DD	04c0000H
	DD	0540000H
	DD	05c0000H
	DD	0640000H
	DD	06c0000H
	DD	0740000H
	DD	07c0000H
	DD	0840000H
	DD	08c0000H
	DD	0940000H
	DD	09c0000H
	DD	0a40000H
	DD	0ac0000H
	DD	0b40000H
	DD	0bc0000H
	DD	0c40000H
	DD	0cc0000H
	DD	0d40000H
	DD	0dc0000H
	DD	0e40000H
	DD	0ec0000H
	DD	0f40000H
	DD	0fc0000H
	DD	0fc0404H
	DD	0fc0c0cH
	DD	0fc1414H
	DD	0fc1c1cH
	DD	0fc2424H
	DD	0fc2c2cH
	DD	0fc3434H
	DD	0fc3c3cH
	DD	0fc4444H
	DD	0fc4c4cH
	DD	0fc5454H
	DD	0fc5c5cH
	DD	0fc6464H
	DD	0fc6c6cH
	DD	0fc7474H
	DD	0fc7c7cH
	DD	0fc8484H
	DD	0fc8c8cH
	DD	0fc9494H
	DD	0fc9c9cH
	DD	0fca4a4H
	DD	0fcacacH
	DD	0fcb4b4H
	DD	0fcbcbcH
	DD	0fcc4c4H
	DD	0fcccccH
	DD	0fcd4d4H
	DD	0fcdcdcH
	DD	0fce4e4H
	DD	0fcececH
	DD	0fcf4f4H
	DD	0fcfcfcH
	DD	0fcf8f4H
	DD	0fcf8ecH
	DD	0fcf4e4H
	DD	0fcf4dcH
	DD	0fcf0d4H
	DD	0fcf0ccH
	DD	0fcecc4H
	DD	0fcecbcH
	DD	0fce8b4H
	DD	0fce8acH
	DD	0fce4a4H
	DD	0fce49cH
	DD	0fce094H
	DD	0fce08cH
	DD	0fcdc84H
	DD	0fcdc7cH
	DD	0fcdc74H
	DD	0fcd86cH
	DD	0fcd864H
	DD	0fcd45cH
	DD	0fcd454H
	DD	0fcd04cH
	DD	0fcd044H
	DD	0fccc3cH
	DD	0fccc34H
	DD	0fcc82cH
	DD	0fcc824H
	DD	0fcc41cH
	DD	0fcc414H
	DD	0fcc00cH
	DD	0fcc004H
	DD	0fcc000H
	DD	0f4b800H
	DD	0ecb400H
	DD	0e4ac00H
	DD	0dca800H
	DD	0d4a000H
	DD	0cc9c00H
	DD	0c49400H
	DD	0bc9000H
	DD	0b48800H
	DD	0ac8400H
	DD	0a47c00H
	DD	09c7800H
	DD	0947000H
	DD	08c6c00H
	DD	0846400H
	DD	07c6000H
	DD	0745800H
	DD	06c5400H
	DD	0644c00H
	DD	05c4800H
	DD	0544000H
	DD	04c3c00H
	DD	0443400H
	DD	03c3000H
	DD	0342800H
	DD	02c2400H
	DD	0241c00H
	DD	01c1800H
	DD	0141000H
	DD	0c0c00H
	DD	040400H
	DD	00H
	DD	040400H
	DD	0c0800H
	DD	0140c00H
	DD	01c1000H
	DD	0241400H
	DD	02c1800H
	DD	0341c00H
	DD	03c2000H
	DD	0442400H
	DD	04c2800H
	DD	0542c00H
	DD	05c3000H
	DD	0643400H
	DD	06c3800H
	DD	0743c00H
	DD	07c4000H
	DD	0844400H
	DD	08c4800H
	DD	0944c00H
	DD	09c5000H
	DD	0a45400H
	DD	0ac5800H
	DD	0b45c00H
	DD	0bc6000H
	DD	0c46400H
	DD	0cc6800H
	DD	0d46c00H
	DD	0dc7000H
	DD	0e47400H
	DD	0ec7800H
	DD	0f47c00H
	DD	0fc8000H
	DD	0fc8004H
	DD	0fc840cH
	DD	0fc8814H
	DD	0fc8c1cH
	DD	0fc9024H
	DD	0fc942cH
	DD	0fc9834H
	DD	0fc9c3cH
	DD	0fca044H
	DD	0fca44cH
	DD	0fca854H
	DD	0fcac5cH
	DD	0fcb064H
	DD	0fcb46cH
	DD	0fcb874H
	DD	0fcbc7cH
	DD	0fcc084H
	DD	0fcc48cH
	DD	0fcc894H
	DD	0fccc9cH
	DD	0fcd0a4H
	DD	0fcd4acH
	DD	0fcd8b4H
	DD	0fcdcbcH
	DD	0fce0c4H
	DD	0fce4ccH
	DD	0fce8d4H
	DD	0fcecdcH
	DD	0fcf0e4H
	DD	0fcf4ecH
	DD	0fcf8f4H
	DD	0fcfcfcH
	DD	0fcf8f4H
	DD	0fcf8ecH
	DD	0fcf4e4H
	DD	0fcf4dcH
	DD	0fcf0d4H
	DD	0fcf0ccH
	DD	0fcecc4H
	DD	0fcecbcH
	DD	0fce8b4H
	DD	0fce8acH
	DD	0fce4a4H
	DD	0fce49cH
	DD	0fce094H
	DD	0fce08cH
	DD	0fcdc84H
	DD	0fcdc7cH
	DD	0fcdc74H
	DD	0fcd86cH
	DD	0fcd864H
	DD	0fcd45cH
	DD	0fcd454H
	DD	0fcd04cH
	DD	0fcd044H
	DD	0fccc3cH
	DD	0fccc34H
	DD	0fcc82cH
	DD	0fcc824H
	DD	0fcc41cH
	DD	0fcc414H
	DD	0fcc00cH
	DD	0fcc004H
	DD	0fcc000H
	DD	0f4b800H
	DD	0ecb400H
	DD	0e4ac00H
	DD	0dca800H
	DD	0d4a000H
	DD	0cc9c00H
	DD	0c49400H
	DD	0bc9000H
	DD	0b48800H
	DD	0ac8400H
	DD	0a47c00H
	DD	09c7800H
	DD	0947000H
	DD	08c6c00H
	DD	0846400H
	DD	07c6000H
	DD	0745800H
	DD	06c5400H
	DD	0644c00H
	DD	05c4800H
	DD	0544000H
	DD	04c3c00H
	DD	0443400H
	DD	03c3000H
	DD	0342800H
	DD	02c2400H
	DD	0241c00H
	DD	01c1800H
	DD	0141000H
	DD	0c0c00H
	DD	040400H
_pal_11	DD	00H
	DD	020201H
	DD	0f0e0cH
	DD	01d1c19H
	DD	02d2b27H
	DD	0393833H
	DD	046443dH
	DD	0514e47H
	DD	05b5850H
	DD	0646057H
	DD	0676358H
	DD	06a6658H
	DD	06c6758H
	DD	06e6957H
	DD	0706a57H
	DD	0736c56H
	DD	0766e55H
	DD	07b7257H
	DD	0847b5fH
	DD	08c8466H
	DD	0958c70H
	DD	09e9578H
	DD	0a69d80H
	DD	0aea588H
	DD	0b5ab8fH
	DD	0bab194H
	DD	0bcb393H
	DD	0beb393H
	DD	0c0b593H
	DD	0c2b791H
	DD	0c4b790H
	DD	0c6b990H
	DD	0c9bb90H
	DD	0cdbe91H
	DD	0d2c597H
	DD	0d7c99cH
	DD	0dccea2H
	DD	0e1d3a7H
	DD	0e5d8adH
	DD	0e9dcb2H
	DD	0eddfb6H
	DD	0efe2b9H
	DD	0ede0b6H
	DD	0e9dbb1H
	DD	0e5d7acH
	DD	0e1d3a7H
	DD	0ddcea1H
	DD	0d7c99cH
	DD	0d2c496H
	DD	0ccbf91H
	DD	0c9bd91H
	DD	0c7bb91H
	DD	0c3b891H
	DD	0c1b692H
	DD	0bfb693H
	DD	0bdb494H
	DD	0bbb394H
	DD	0b7b093H
	DD	0b1aa8eH
	DD	0aaa386H
	DD	0a19c7eH
	DD	09a9377H
	DD	0908a6dH
	DD	0878164H
	DD	07e795dH
	DD	0767257H
	DD	0716d54H
	DD	06d6a53H
	DD	06a6854H
	DD	0686654H
	DD	0666655H
	DD	0646456H
	DD	0636357H
	DD	05f6056H
	DD	056574dH
	DD	04a4c45H
	DD	03e3f39H
	DD	031332eH
	DD	0252722H
	DD	0191a17H
	DD	0d0e0cH
	DD	030403H
	DD	040101H
	DD	0f0707H
	DD	0190e0dH
	DD	0231212H
	DD	02d1918H
	DD	0371f1eH
	DD	0402424H
	DD	0492828H
	DD	04d2726H
	DD	0502523H
	DD	0542220H
	DD	0571f1cH
	DD	05c1d19H
	DD	0611b17H
	DD	0671a16H
	DD	06d1b15H
	DD	0751e19H
	DD	07d251fH
	DD	0842a24H
	DD	08d312aH
	DD	0953730H
	DD	09a3c35H
	DD	0a1413aH
	DD	0a7433cH
	DD	0aa433bH
	DD	0ad4139H
	DD	0b03e36H
	DD	0b33b33H
	DD	0b6392fH
	DD	0b9362dH
	DD	0bd342aH
	DD	0c13329H
	DD	0c6382dH
	DD	0cb3d32H
	DD	0cf4237H
	DD	0d3473bH
	DD	0d94b41H
	DD	0db4f45H
	DD	0df5449H
	DD	0e2574bH
	DD	0e05349H
	DD	0dd4f44H
	DD	0d94b40H
	DD	0d6463bH
	DD	0d14136H
	DD	0cc3c31H
	DD	0c7382cH
	DD	0c33429H
	DD	0bf362bH
	DD	0bc382fH
	DD	0b83a31H
	DD	0b53c34H
	DD	0b33f37H
	DD	0af4139H
	DD	0ac433bH
	DD	0a8433cH
	DD	0a34038H
	DD	09c3a33H
	DD	095362eH
	DD	08e2e28H
	DD	0872923H
	DD	07e241dH
	DD	0761e17H
	DD	0701a13H
	DD	06a1b14H
	DD	0651c17H
	DD	0601f19H
	DD	05c211dH
	DD	057231fH
	DD	0542623H
	DD	0512825H
	DD	04c2826H
	DD	0432421H
	DD	0381e1cH
	DD	02f1917H
	DD	0261313H
	DD	01c0e0eH
	DD	0110909H
	DD	080303H
	DD	020101H
	DD	090a0aH
	DD	0151717H
	DD	0232626H
	DD	0313434H
	DD	03e4142H
	DD	04b4e4eH
	DD	0575a5aH
	DD	0606464H
	DD	0626666H
	DD	0646969H
	DD	0656969H
	DD	0686d6dH
	DD	06b7070H
	DD	06f7474H
	DD	0747979H
	DD	07b8080H
	DD	0868a8bH
	DD	08f9393H
	DD	0999c9cH
	DD	0a2a5a5H
	DD	0abadadH
	DD	0b2b5b5H
	DD	0babcbcH
	DD	0bfc1c1H
	DD	0c2c4c4H
	DD	0c5c7c7H
	DD	0c8cacaH
	DD	0caccccH
	DD	0cecfd0H
	DD	0d1d2d2H
	DD	0d5d7d7H
	DD	0d9dadbH
	DD	0dfe0e0H
	DD	0e4e4e4H
	DD	0e9eaeaH
	DD	0eeeeeeH
	DD	0f2f2f2H
	DD	0f6f6f6H
	DD	0f9f9f9H
	DD	0fcfcfcH
	DD	0fbfbfbH
	DD	0f8f8f8H
	DD	0f5f5f5H
	DD	0f2f1f1H
	DD	0edededH
	DD	0e8e8e8H
	DD	0e3e3e3H
	DD	0dededeH
	DD	0dbdadaH
	DD	0d6d6d6H
	DD	0d3d3d3H
	DD	0d0d0d0H
	DD	0cececeH
	DD	0cacacaH
	DD	0c8c7c7H
	DD	0c4c4c3H
	DD	0bebebeH
	DD	0b7b7b7H
	DD	0afafafH
	DD	0a7a7a7H
	DD	09e9d9dH
	DD	0969595H
	DD	08d8c8cH
	DD	0848383H
	DD	07f7f7eH
	DD	07a7a79H
	DD	0767575H
	DD	0737271H
	DD	071706fH
	DD	06e6d6dH
	DD	06b6b6bH
	DD	0686767H
	DD	05d5c5cH
	DD	0505050H
	DD	0434242H
	DD	0363535H
	DD	0282727H
	DD	0191919H
	DD	0d0d0dH
	DD	030303H
	DD	070707H
	DD	0101112H
	DD	0191c1cH
	DD	0242627H
	DD	02f3232H
	DD	03a3e3eH
	DD	0434848H
	DD	04a4f50H
	DD	0484e50H
	DD	0464c4eH
	DD	0434a4dH
	DD	041494cH
	DD	03e484bH
	DD	03c474bH
	DD	03b484cH
	DD	03f4d51H
	DD	048565aH
	DD	0505f62H
	DD	059686cH
	DD	0627175H
	DD	06b7a7eH
	DD	0728286H
	DD	07a898dH
	DD	07f8e92H
	DD	07e8e92H
	DD	07d8e92H
	DD	07b8d91H
	DD	0798c91H
	DD	0778b91H
	DD	0758a91H
	DD	0748b92H
	DD	0748c94H
	DD	07a9299H
	DD	082989fH
	DD	0889fa5H
	DD	08fa5abH
	DD	094aab1H
	DD	09aafb6H
	DD	09fb3baH
	DD	0a2b7bdH
	DD	09fb5bbH
	DD	09ab1b7H
	DD	096acb2H
	DD	08fa6acH
	DD	089a0a8H
	DD	0839ba2H
	DD	07e969eH
	DD	0799198H
	DD	0789097H
	DD	07a9096H
	DD	07b9097H
	DD	07d9197H
	DD	07f9297H
	DD	0819297H
	DD	0829297H
	DD	0839397H
	DD	07f8e92H
	DD	076868aH
	DD	06f7e82H
	DD	0667579H
	DD	05d6c72H
	DD	0556368H
	DD	04c5b60H
	DD	0475559H
	DD	0465357H
	DD	0465256H
	DD	0475255H
	DD	0495256H
	DD	04c5457H
	DD	04e5558H
	DD	0505658H
	DD	04f5557H
	DD	0474c4dH
	DD	03d4143H
	DD	0333637H
	DD	0292b2cH
	DD	01c1e1fH
	DD	0121314H
	DD	080a0aH
	DD	020203H
	DD	070707H
	DD	0121312H
	DD	01e1f1eH
	DD	02a2b2aH
	DD	0373837H
	DD	0434543H
	DD	04d504eH
	DD	0555856H
	DD	0555856H
	DD	0555a56H
	DD	0555a57H
	DD	0555a57H
	DD	0565b58H
	DD	0555c58H
	DD	058605cH
	DD	05d6561H
	DD	068706bH
	DD	0717974H
	DD	07a827dH
	DD	0838c86H
	DD	08b948fH
	DD	0939c97H
	DD	09aa39fH
	DD	0a0a9a4H
	DD	0a1aba6H
	DD	0a1aca6H
	DD	0a1ada7H
	DD	0a1afa8H
	DD	0a1afa9H
	DD	0a3b1abH
	DD	0a4b4acH
	DD	0a7b7afH
	DD	0adbdb5H
	DD	0b3c3bbH
	DD	0b9c8c1H
	DD	0becdc5H
	DD	0c3d2cbH
	DD	0c7d6cfH
	DD	0cbdad3H
	DD	0cedcd6H
	DD	0cfdcd6H
	DD	0cbdad3H
	DD	0c6d6ceH
	DD	0c1d0c9H
	DD	0bdcdc5H
	DD	0b8c8c1H
	DD	0b2c3bbH
	DD	0aebeb6H
	DD	0acbcb4H
	DD	0abbab2H
	DD	0aab9b1H
	DD	0a9b7b0H
	DD	0a9b6b0H
	DD	0a9b5afH
	DD	0a8b4afH
	DD	0a6b1acH
	DD	0a1aba7H
	DD	09aa49fH
	DD	0929c97H
	DD	08a9590H
	DD	0838d87H
	DD	07a837fH
	DD	0717b76H
	DD	06b746fH
	DD	06a736eH
	DD	067706bH
	DD	0656c68H
	DD	0646b68H
	DD	0646a67H
	DD	0646967H
	DD	0646866H
	DD	0616562H
	DD	0585b59H
	DD	04d504eH
	DD	0424442H
	DD	0343735H
	DD	0272928H
	DD	01b1c1bH
	DD	0f1010H
	ORG $+4
_pal_12	DD	00H
	DD	0288834H
	DD	0104440H
	DD	03c3438H
	DD	02c2828H
	DD	02c2828H
	DD	0102828H
	DD	0342828H
	DD	082828H
	DD	0402828H
	DD	042828H
	DD	0842828H
	DD	0c2828H
	DD	08c2828H
	DD	0182828H
	DD	0182828H
	DD	0a42828H
	DD	0782828H
	DD	0442828H
	DD	0502828H
	DD	0582828H
	DD	0682828H
	DD	0782828H
	DD	08c2828H
	DD	0942828H
	DD	09c2828H
	DD	0a42828H
	DD	0b02828H
	DD	0b82828H
	DD	0c42828H
	DD	0d42828H
	DD	0e02828H
	DD	0ec2828H
	DD	0f82828H
	DD	0f82c2cH
	DD	0f81c1cH
	DD	0f84040H
	DD	0f81818H
	DD	0f81010H
	DD	0f80c0cH
	DD	0f80808H
	DD	0f80404H
	DD	0f80404H
	DD	0f80808H
	DD	0f80c0cH
	DD	0f81010H
	DD	0f81818H
	DD	0f82828H
	DD	0f83434H
	DD	0f83c3cH
	DD	0f84444H
	DD	0f85050H
	DD	0f85858H
	DD	0f86868H
	DD	0f87878H
	DD	0f88c8cH
	DD	0f89494H
	DD	0f89c9cH
	DD	0f8a4a4H
	DD	0f8b0b0H
	DD	0f8b8b8H
	DD	0f8c4c4H
	DD	0f8d4d4H
	DD	0f8e0e0H
	DD	0f8ececH
	DD	0f8f8f8H
	DD	0f8f4ecH
	DD	0f8f4e0H
	DD	0f8ecd4H
	DD	0f8ecc4H
	DD	0f8e4b8H
	DD	0f8e4b0H
	DD	0f8e0a4H
	DD	0f8e09cH
	DD	0f8d894H
	DD	0f8d88cH
	DD	0f8d478H
	DD	0f8d468H
	DD	0f8cc58H
	DD	0f8cc50H
	DD	0f8c444H
	DD	0f8c43cH
	DD	0f8c434H
	DD	0f8c028H
	DD	0f8c018H
	DD	0f8b810H
	DD	0f8b80cH
	DD	0f8b408H
	DD	0f8b404H
	DD	0f8b004H
	DD	0f8b008H
	DD	0f8a80cH
	DD	0f8a810H
	DD	0f8a418H
	DD	0f8a440H
	DD	0f8a01cH
	DD	0f8a02cH
	DD	0f8a028H
	DD	0ec9828H
	DD	0e09428H
	DD	0d48c28H
	DD	0c48428H
	DD	0b87028H
	DD	0b06828H
	DD	0a45828H
	DD	09c5828H
	DD	0944c28H
	DD	08c4428H
	DD	0783c28H
	DD	0683828H
	DD	0582c28H
	DD	0502828H
	DD	0441828H
	DD	03c1428H
	DD	0340c28H
	DD	0280c28H
	DD	0180828H
	DD	0100428H
	DD	0c0428H
	DD	080428H
	DD	040828H
	DD	040828H
	DD	080c28H
	DD	0c1028H
	DD	0101828H
	DD	0181c28H
	DD	0403c28H
	DD	01c1c28H
	DD	02c2c28H
	DD	0282828H
	DD	02c2c28H
	DD	01c1c28H
	DD	0401c28H
	DD	0186828H
	DD	0104028H
	DD	0c1c28H
	DD	081828H
	DD	041428H
	DD	041028H
	DD	080c28H
	DD	0c0c28H
	DD	0202020H
	DD	0242424H
	DD	0282428H
	DD	0302028H
	DD	03c0428H
	DD	0440428H
	DD	0500428H
	DD	0580828H
	DD	0680828H
	DD	0780c28H
	DD	08c0c28H
	DD	0941028H
	DD	09c1428H
	DD	0a41828H
	DD	0b02028H
	DD	0b82828H
	DD	0c42c28H
	DD	0d43428H
	DD	0e03828H
	DD	0ec3c28H
	DD	0f84428H
	DD	0f8442cH
	DD	0f8441cH
	DD	0f84c40H
	DD	0f85018H
	DD	0f85810H
	DD	0f8580cH
	DD	0f86008H
	DD	0f86804H
	DD	0f87004H
	DD	0f87808H
	DD	0f8840cH
	DD	0f88c10H
	DD	0f89018H
	DD	0f89428H
	DD	0f89834H
	DD	0f89c3cH
	DD	0f8a044H
	DD	0f8a450H
	DD	0f8a858H
	DD	0f8b068H
	DD	0f8b478H
	DD	0f8b88cH
	DD	0f8c094H
	DD	0f8c49cH
	DD	0f8cca4H
	DD	0f8d4b0H
	DD	0f8d8b8H
	DD	0f8e0c4H
	DD	0f8e4d4H
	DD	0f8ece0H
	DD	0f8f4ecH
	DD	0f8f8f8H
	DD	0f8f4ecH
	DD	0f8f4e0H
	DD	0f8ecd4H
	DD	0f8ecc4H
	DD	0f8e4b8H
	DD	0f8e4b0H
	DD	0f8e0a4H
	DD	0f8e09cH
	DD	0f8d894H
	DD	0f8d88cH
	DD	0f8d478H
	DD	0f8d468H
	DD	0f8cc58H
	DD	0f8cc50H
	DD	0f8c444H
	DD	0f8c43cH
	DD	0f8c434H
	DD	0f8c028H
	DD	0f8c018H
	DD	0f8b810H
	DD	0f8b80cH
	DD	0f8b408H
	DD	0f8b404H
	DD	0f8b004H
	DD	0f8b008H
	DD	0f8a80cH
	DD	0f8a810H
	DD	0f8a418H
	DD	0f8a440H
	DD	0f8a01cH
	DD	0f8a02cH
	DD	0f8a028H
	DD	0ec9828H
	DD	0e09428H
	DD	0d48c28H
	DD	0c48428H
	DD	0b87028H
	DD	0b06828H
	DD	0a45828H
	DD	09c5828H
	DD	0944c28H
	DD	08c4428H
	DD	0783c28H
	DD	0683828H
	DD	0582c28H
	DD	04c2028H
	DD	0441828H
	DD	03c1428H
	DD	0340c28H
	DD	0280c28H
	DD	0180830H
	DD	0100434H
	DD	0c043cH
	DD	080440H
	DD	040840H
	DD	040844H
	DD	080c40H
	DD	0c103cH
	DD	0101c30H
	DD	0181c28H
	DD	02400H
	DD	01c1c28H
_pal_13	DD	00H
	DD	0141414H
	DD	01c1c1cH
	DD	0241818H
	DD	02c1c1cH
	DD	0381c24H
	DD	0402034H
	DD	0482034H
	DD	050283cH
	DD	0582844H
	DD	0602c4cH
	DD	068305cH
	DD	0703464H
	DD	078386cH
	DD	0803c74H
	DD	0884088H
	DD	0904490H
	DD	08c4498H
	DD	08848a0H
	DD	0904ca8H
	DD	0904cb0H
	DD	08c4cb8H
	DD	08050c0H
	DD	08854c8H
	DD	08854d0H
	DD	08854d8H
	DD	07c5cdcH
	DD	0785ce4H
	DD	06c64e8H
	DD	06c64f0H
	DD	06868f0H
	DD	06874f0H
	DD	080a0f0H
	DD	080a0f0H
	DD	07898f0H
	DD	0749cf0H
	DD	074ace8H
	DD	06ca8e0H
	DD	06cacd8H
	DD	068a4d0H
	DD	068a8c8H
	DD	064a0c0H
	DD	05c98b8H
	DD	05ca0b0H
	DD	05898a8H
	DD	058a0a0H
	DD	0509898H
	DD	04c9090H
	DD	0488878H
	DD	0448070H
	DD	0407868H
	DD	0387054H
	DD	034684cH
	DD	0346050H
	DD	030583cH
	DD	02c5038H
	DD	0284428H
	DD	0283c28H
	DD	0203420H
	DD	01c2c1cH
	DD	0242424H
	DD	01c1c1cH
	DD	0141414H
	DD	0101010H
	DD	0101010H
	DD	0181810H
	DD	0202014H
	DD	0202818H
	DD	024301cH
	DD	030381cH
	DD	0344020H
	DD	0484824H
	DD	0445028H
	DD	04c582cH
	DD	0606030H
	DD	0686834H
	DD	0707034H
	DD	0786c38H
	DD	080743cH
	DD	088703cH
	DD	0907840H
	DD	0987840H
	DD	0a06c44H
	DD	0a87048H
	DD	0b07048H
	DD	0b87048H
	DD	0bc7050H
	DD	0c46450H
	DD	0c86058H
	DD	0d06058H
	DD	0d85c5cH
	DD	0e05c68H
	DD	0ec6080H
	DD	0f06080H
	DD	0f06894H
	DD	0f068a8H
	DD	0f080bcH
	DD	0f07cb8H
	DD	0f07cb8H
	DD	0f078c4H
	DD	0e874c8H
	DD	0e070c0H
	DD	0d86cb8H
	DD	0d06cc0H
	DD	0c868b8H
	DD	0c068c0H
	DD	0b860b8H
	DD	0a05cb0H
	DD	09858a8H
	DD	08054a0H
	DD	0784c98H
	DD	0744890H
	DD	0604488H
	DD	0604480H
	DD	05c4078H
	DD	0543870H
	DD	0383864H
	DD	034345cH
	DD	0303054H
	DD	02c2c4cH
	DD	0282844H
	DD	028283cH
	DD	0202034H
	DD	01c1c2cH
	DD	0242424H
	DD	0142020H
	DD	0101818H
	DD	0101010H
	DD	0101010H
	DD	0101818H
	DD	0142020H
	DD	0182028H
	DD	01c3030H
	DD	0203838H
	DD	0204040H
	DD	0244848H
	DD	0285044H
	DD	02c584cH
	DD	02c604cH
	DD	030685cH
	DD	030705cH
	DD	0387860H
	DD	0388060H
	DD	0388854H
	DD	03c905cH
	DD	0409454H
	DD	0449c58H
	DD	044a458H
	DD	04cac54H
	DD	04cb04cH
	DD	050b850H
	DD	05cc054H
	DD	06ccc54H
	DD	074d454H
	DD	07cdc5cH
	DD	094e85cH
	DD	0a0f060H
	DD	0acf064H
	DD	0b4f068H
	DD	0c8f06cH
	DD	0e8f084H
	DD	0e0f080H
	DD	0e8f080H
	DD	0e0f07cH
	DD	0e8e878H
	DD	0e0e074H
	DD	0d8c470H
	DD	0d0c06cH
	DD	0c8b868H
	DD	0c0a064H
	DD	0b8985cH
	DD	0b08458H
	DD	0a87c54H
	DD	0a07850H
	DD	0986c4cH
	DD	08c5c4cH
	DD	0845444H
	DD	07c4040H
	DD	0744040H
	DD	06c3c3cH
	DD	0643838H
	DD	05c3434H
	DD	0543030H
	DD	04c2c2cH
	DD	0442828H
	DD	0402434H
	DD	038202cH
	DD	0301c24H
	DD	0281c28H
	DD	0201420H
	DD	0181018H
	DD	0101010H
	DD	0101010H
	DD	0181018H
	DD	0201420H
	DD	0281828H
	DD	0301c30H
	DD	0382038H
	DD	0342040H
	DD	03c2448H
	DD	0442850H
	DD	0442858H
	DD	04c2c60H
	DD	0482c68H
	DD	0503070H
	DD	0483474H
	DD	044387cH
	DD	0443884H
	DD	048408cH
	DD	0404090H
	DD	0444498H
	DD	04450a4H
	DD	04c60acH
	DD	04c60b4H
	DD	05070bcH
	DD	05080c8H
	DD	05488d0H
	DD	05898d8H
	DD	05ca8e0H
	DD	064b0e8H
	DD	068c4f0H
	DD	06cd4f0H
	DD	070e8f0H
	DD	074f0f0H
	DD	088f0f0H
	DD	084f0f0H
	DD	080f0e4H
	DD	07cf0dcH
	DD	074e8c4H
	DD	070e0c0H
	DD	06cd8a8H
	DD	068d0a0H
	DD	064c88cH
	DD	05cc084H
	DD	058b880H
	DD	05cac6cH
	DD	054a464H
	DD	0509c60H
	DD	04c944cH
	DD	04c8c4cH
	DD	0448444H
	DD	0407c40H
	DD	0407440H
	DD	03c6c3cH
	DD	0506834H
	DD	0506034H
	DD	04c5830H
	DD	044502cH
	DD	0384828H
	DD	0344024H
	DD	02c3820H
	DD	0303020H
	DD	028281cH
	DD	0202014H
	DD	0181810H
	DD	0101010H
_palettes DD	FLAT:_pal_0
	DD	0100H
	DD	FLAT:_pal_1
	DD	0100H
	DD	FLAT:_pal_2
	DD	0100H
	DD	FLAT:_pal_3
	DD	0100H
	DD	FLAT:_pal_4
	DD	0100H
	DD	FLAT:_pal_5
	DD	0178H
	DD	FLAT:_pal_6
	DD	0100H
	DD	FLAT:_pal_7
	DD	0191H
	DD	FLAT:_pal_8
	DD	0100H
	DD	FLAT:_pal_9
	DD	0100H
	DD	FLAT:_pal_10
	DD	0100H
	DD	FLAT:_pal_11
	DD	0191H
	DD	FLAT:_pal_12
	DD	0100H
	DD	FLAT:_pal_13
	DD	0100H
	DD	00H
	DD	00H
_magsq_scale_factor DQ 04000000000000000r	; 2
_DATA	ENDS
PUBLIC	_init_palettes
PUBLIC	_load_palette
PUBLIC	_load_palette_from_bmp
PUBLIC	_get_palette_rgb_val
PUBLIC	_apply_palette
PUBLIC	_get_unsigned
PUBLIC	_realloc_user_palette
PUBLIC	_get_normalized_color
PUBLIC	_get_normalized_color_nolookup
PUBLIC	_apply_palette_threaded@4
PUBLIC	__real@3fdf5c28f5c28f5c
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff71547652b8eca
PUBLIC	__real@4070000000000000
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__QueueUserWorkItem@12:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	_feof:PROC
EXTRN	_fgets:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_log:PROC
EXTRN	__dtoui3:PROC
EXTRN	_main_man_calc_struct:BYTE
EXTRN	_save_man_calc_struct:BYTE
EXTRN	_num_threads:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_num_valid_palettes DD 01H DUP (?)
_interp_table DD 0200H DUP (?)
_BSS	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@3ff71547652b8eca
CONST	SEGMENT
__real@3ff71547652b8eca DQ 03ff71547652b8ecar	; 1.4427
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdf5c28f5c28f5c
CONST	SEGMENT
__real@3fdf5c28f5c28f5c DQ 03fdf5c28f5c28f5cr	; 0.49
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _apply_palette_threaded@4
_TEXT	SEGMENT
_m$ = -88						; size = 4
_ralg$ = -84						; size = 4
_max_iters_color$ = -80					; size = 4
_n$ = -76						; size = 4
_pal$ = -72						; size = 4
_ysize$ = -68						; size = 4
_xsize$ = -64						; size = 4
_bmp_line_size$ = -60					; size = 4
_iter_line_size$ = -56					; size = 4
_src$ = -52						; size = 4
_dest$ = -48						; size = 4
_max_iters$ = -44					; size = 4
_pal_xor$ = -40						; size = 4
_iter_ind$ = -36					; size = 4
_bmp_ind$ = -32						; size = 4
_iter_line$ = -28					; size = 4
_bmp_line$ = -24					; size = 4
_y$ = -20						; size = 4
_x$ = -16						; size = 4
_prev$ = -12						; size = 4
_prev_iters$ = -8					; size = 4
_iters$ = -4						; size = 4
_p$ = 8							; size = 4
_apply_palette_threaded@4 PROC				; COMDAT

; 1044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1045 :    unsigned iters, prev_iters, prev, x, y, bmp_line, iter_line, bmp_ind, iter_ind, pal_xor, max_iters;
; 1046 :    unsigned *dest, *src, iter_line_size, bmp_line_size, xsize, ysize, *pal, n, max_iters_color, ralg;
; 1047 :    man_calc_struct *m;
; 1048 : 
; 1049 :    m = (man_calc_struct *) p->calc_struct;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d a8	 mov	 DWORD PTR _m$[ebp], ecx

; 1050 : 
; 1051 :    // values from pal_work struct
; 1052 :    dest = p->dest;

  00014	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00017	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001a	89 4d d0	 mov	 DWORD PTR _dest$[ebp], ecx

; 1053 :    src = p->src;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	89 4d cc	 mov	 DWORD PTR _src$[ebp], ecx

; 1054 :    xsize = p->xsize;         // this xsize is the palette xsize to map

  00026	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00029	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002c	89 4d c0	 mov	 DWORD PTR _xsize$[ebp], ecx

; 1055 :    ysize = p->ysize;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00035	89 4d bc	 mov	 DWORD PTR _ysize$[ebp], ecx

; 1056 :    pal = p->pal;

  00038	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d b8	 mov	 DWORD PTR _pal$[ebp], ecx

; 1057 :    n = p->pal_size;

  00041	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00044	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00047	89 4d b4	 mov	 DWORD PTR _n$[ebp], ecx

; 1058 :    max_iters_color = p->max_iters_color;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0004d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00050	89 4d b0	 mov	 DWORD PTR _max_iters_color$[ebp], ecx

; 1059 : 
; 1060 :    // values from man_calc_struct
; 1061 :    bmp_line_size = m->xsize; // this xsize is the size of the whole mandelbrot image

  00053	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  00056	8b 88 88 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36232]
  0005c	89 4d c4	 mov	 DWORD PTR _bmp_line_size$[ebp], ecx

; 1062 :    iter_line_size = m->iter_data_line_size;

  0005f	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  00062	8b 88 e4 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36324]
  00068	89 4d c8	 mov	 DWORD PTR _iter_line_size$[ebp], ecx

; 1063 :    ralg = m->rendering_alg;

  0006b	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  0006e	8b 88 04 8e 00
	00		 mov	 ecx, DWORD PTR [eax+36356]
  00074	89 4d ac	 mov	 DWORD PTR _ralg$[ebp], ecx

; 1064 :    pal_xor = m->pal_xor;

  00077	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  0007a	8b 88 fc 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36348]
  00080	89 4d d8	 mov	 DWORD PTR _pal_xor$[ebp], ecx

; 1065 :    max_iters = m->max_iters;

  00083	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  00086	8b 88 c0 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36288]
  0008c	89 4d d4	 mov	 DWORD PTR _max_iters$[ebp], ecx

; 1066 : 
; 1067 :    if (max_iters <= PAL_LOOKUP_MAX)

  0008f	81 7d d4 00 80
	00 00		 cmp	 DWORD PTR _max_iters$[ebp], 32768 ; 00008000H
  00096	0f 87 ee 00 00
	00		 ja	 $LN17@apply_pale

; 1068 :    {
; 1069 :       bmp_line = 0;

  0009c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bmp_line$[ebp], 0

; 1070 :       iter_line = 0;

  000a3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iter_line$[ebp], 0

; 1071 :       y = ysize;

  000aa	8b 45 bc	 mov	 eax, DWORD PTR _ysize$[ebp]
  000ad	89 45 ec	 mov	 DWORD PTR _y$[ebp], eax
$LN4@apply_pale:

; 1072 :       do
; 1073 :       {
; 1074 :          bmp_ind = bmp_line;

  000b0	8b 45 e8	 mov	 eax, DWORD PTR _bmp_line$[ebp]
  000b3	89 45 e0	 mov	 DWORD PTR _bmp_ind$[ebp], eax

; 1075 :          iter_ind = iter_line;

  000b6	8b 45 e4	 mov	 eax, DWORD PTR _iter_line$[ebp]
  000b9	89 45 dc	 mov	 DWORD PTR _iter_ind$[ebp], eax

; 1076 :          x = xsize;

  000bc	8b 45 c0	 mov	 eax, DWORD PTR _xsize$[ebp]
  000bf	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax

; 1077 :          if (!ralg)  // standard

  000c2	83 7d ac 00	 cmp	 DWORD PTR _ralg$[ebp], 0
  000c6	75 3e		 jne	 SHORT $LN19@apply_pale
$LN7@apply_pale:

; 1078 :             do
; 1079 :                dest[bmp_ind++] = m->pal_lookup[src[iter_ind++]] ^ pal_xor;

  000c8	8b 45 dc	 mov	 eax, DWORD PTR _iter_ind$[ebp]
  000cb	8b 4d cc	 mov	 ecx, DWORD PTR _src$[ebp]
  000ce	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000d1	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  000d4	8b 8c 90 08 93
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+37640]
  000db	33 4d d8	 xor	 ecx, DWORD PTR _pal_xor$[ebp]
  000de	8b 55 e0	 mov	 edx, DWORD PTR _bmp_ind$[ebp]
  000e1	8b 45 d0	 mov	 eax, DWORD PTR _dest$[ebp]
  000e4	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  000e7	8b 4d e0	 mov	 ecx, DWORD PTR _bmp_ind$[ebp]
  000ea	83 c1 01	 add	 ecx, 1
  000ed	89 4d e0	 mov	 DWORD PTR _bmp_ind$[ebp], ecx
  000f0	8b 55 dc	 mov	 edx, DWORD PTR _iter_ind$[ebp]
  000f3	83 c2 01	 add	 edx, 1
  000f6	89 55 dc	 mov	 DWORD PTR _iter_ind$[ebp], edx

; 1080 :             while (--x);

  000f9	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  000fc	83 e8 01	 sub	 eax, 1
  000ff	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
  00102	75 c4		 jne	 SHORT $LN7@apply_pale
  00104	eb 5e		 jmp	 SHORT $LN9@apply_pale
$LN19@apply_pale:

; 1081 :          else       // normalized
; 1082 :             do
; 1083 :             {
; 1084 :                dest[bmp_ind++] = get_normalized_color(m, src[iter_ind], MAG(m, &src[iter_ind])) ^ pal_xor;

  00106	8b 45 dc	 mov	 eax, DWORD PTR _iter_ind$[ebp]
  00109	8b 4d cc	 mov	 ecx, DWORD PTR _src$[ebp]
  0010c	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0010f	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  00112	8b 88 ec 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36332]
  00118	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  0011d	83 ec 08	 sub	 esp, 8
  00120	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00125	8b 55 dc	 mov	 edx, DWORD PTR _iter_ind$[ebp]
  00128	8b 45 cc	 mov	 eax, DWORD PTR _src$[ebp]
  0012b	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0012e	51		 push	 ecx
  0012f	8b 55 a8	 mov	 edx, DWORD PTR _m$[ebp]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 _get_normalized_color
  00138	83 c4 10	 add	 esp, 16			; 00000010H
  0013b	33 45 d8	 xor	 eax, DWORD PTR _pal_xor$[ebp]
  0013e	8b 4d e0	 mov	 ecx, DWORD PTR _bmp_ind$[ebp]
  00141	8b 55 d0	 mov	 edx, DWORD PTR _dest$[ebp]
  00144	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  00147	8b 45 e0	 mov	 eax, DWORD PTR _bmp_ind$[ebp]
  0014a	83 c0 01	 add	 eax, 1
  0014d	89 45 e0	 mov	 DWORD PTR _bmp_ind$[ebp], eax

; 1085 :                iter_ind++;

  00150	8b 45 dc	 mov	 eax, DWORD PTR _iter_ind$[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 dc	 mov	 DWORD PTR _iter_ind$[ebp], eax

; 1086 :             }
; 1087 :             while (--x);

  00159	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  0015c	83 e8 01	 sub	 eax, 1
  0015f	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
  00162	75 a2		 jne	 SHORT $LN19@apply_pale
$LN9@apply_pale:

; 1088 : 
; 1089 :          bmp_line += bmp_line_size;

  00164	8b 45 e8	 mov	 eax, DWORD PTR _bmp_line$[ebp]
  00167	03 45 c4	 add	 eax, DWORD PTR _bmp_line_size$[ebp]
  0016a	89 45 e8	 mov	 DWORD PTR _bmp_line$[ebp], eax

; 1090 :          iter_line += iter_line_size;

  0016d	8b 45 e4	 mov	 eax, DWORD PTR _iter_line$[ebp]
  00170	03 45 c8	 add	 eax, DWORD PTR _iter_line_size$[ebp]
  00173	89 45 e4	 mov	 DWORD PTR _iter_line$[ebp], eax

; 1091 :       }
; 1092 :       while (--y);

  00176	8b 45 ec	 mov	 eax, DWORD PTR _y$[ebp]
  00179	83 e8 01	 sub	 eax, 1
  0017c	89 45 ec	 mov	 DWORD PTR _y$[ebp], eax
  0017f	0f 85 2b ff ff
	ff		 jne	 $LN4@apply_pale

; 1093 :    }

  00185	e9 53 01 00 00	 jmp	 $LN12@apply_pale
$LN17@apply_pale:

; 1094 :    else // Max iters too big: calculate on the fly
; 1095 :    {
; 1096 :       prev_iters = 0xFFFFFFFF; // non-occurring value

  0018a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prev_iters$[ebp], -1

; 1097 :       bmp_line = 0;

  00191	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bmp_line$[ebp], 0

; 1098 :       iter_line = 0;

  00198	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iter_line$[ebp], 0

; 1099 :       for (y = 0; y < ysize; y++)

  0019f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  001a6	eb 09		 jmp	 SHORT $LN13@apply_pale
$LN11@apply_pale:
  001a8	8b 45 ec	 mov	 eax, DWORD PTR _y$[ebp]
  001ab	83 c0 01	 add	 eax, 1
  001ae	89 45 ec	 mov	 DWORD PTR _y$[ebp], eax
$LN13@apply_pale:
  001b1	8b 45 ec	 mov	 eax, DWORD PTR _y$[ebp]
  001b4	3b 45 bc	 cmp	 eax, DWORD PTR _ysize$[ebp]
  001b7	0f 83 20 01 00
	00		 jae	 $LN12@apply_pale

; 1100 :       {
; 1101 :          bmp_ind = bmp_line;

  001bd	8b 45 e8	 mov	 eax, DWORD PTR _bmp_line$[ebp]
  001c0	89 45 e0	 mov	 DWORD PTR _bmp_ind$[ebp], eax

; 1102 :          iter_ind = iter_line;

  001c3	8b 45 e4	 mov	 eax, DWORD PTR _iter_line$[ebp]
  001c6	89 45 dc	 mov	 DWORD PTR _iter_ind$[ebp], eax

; 1103 :          for (x = 0; x < xsize; x++)

  001c9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001d0	eb 09		 jmp	 SHORT $LN16@apply_pale
$LN14@apply_pale:
  001d2	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  001d5	83 c0 01	 add	 eax, 1
  001d8	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
$LN16@apply_pale:
  001db	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  001de	3b 45 c0	 cmp	 eax, DWORD PTR _xsize$[ebp]
  001e1	0f 83 df 00 00
	00		 jae	 $LN15@apply_pale

; 1104 :          {
; 1105 :             iters = src[iter_ind];

  001e7	8b 45 dc	 mov	 eax, DWORD PTR _iter_ind$[ebp]
  001ea	8b 4d cc	 mov	 ecx, DWORD PTR _src$[ebp]
  001ed	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001f0	89 55 fc	 mov	 DWORD PTR _iters$[ebp], edx

; 1106 :             if (!ralg) // standard

  001f3	83 7d ac 00	 cmp	 DWORD PTR _ralg$[ebp], 0
  001f7	75 5b		 jne	 SHORT $LN21@apply_pale

; 1107 :             {
; 1108 :                if (iters == prev_iters)

  001f9	8b 45 fc	 mov	 eax, DWORD PTR _iters$[ebp]
  001fc	3b 45 f8	 cmp	 eax, DWORD PTR _prev_iters$[ebp]
  001ff	75 0e		 jne	 SHORT $LN23@apply_pale

; 1109 :                   dest[bmp_ind] = prev;

  00201	8b 45 e0	 mov	 eax, DWORD PTR _bmp_ind$[ebp]
  00204	8b 4d d0	 mov	 ecx, DWORD PTR _dest$[ebp]
  00207	8b 55 f4	 mov	 edx, DWORD PTR _prev$[ebp]
  0020a	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  0020d	eb 43		 jmp	 SHORT $LN26@apply_pale
$LN23@apply_pale:

; 1110 :                else
; 1111 :                {
; 1112 :                   prev_iters = iters;

  0020f	8b 45 fc	 mov	 eax, DWORD PTR _iters$[ebp]
  00212	89 45 f8	 mov	 DWORD PTR _prev_iters$[ebp], eax

; 1113 :                   if (iters != max_iters)

  00215	8b 45 fc	 mov	 eax, DWORD PTR _iters$[ebp]
  00218	3b 45 d4	 cmp	 eax, DWORD PTR _max_iters$[ebp]
  0021b	74 23		 je	 SHORT $LN25@apply_pale

; 1114 :                      dest[bmp_ind] = prev = pal[iters % n + 1] ^ pal_xor;

  0021d	8b 45 fc	 mov	 eax, DWORD PTR _iters$[ebp]
  00220	33 d2		 xor	 edx, edx
  00222	f7 75 b4	 div	 DWORD PTR _n$[ebp]
  00225	8b 45 b8	 mov	 eax, DWORD PTR _pal$[ebp]
  00228	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  0022c	33 4d d8	 xor	 ecx, DWORD PTR _pal_xor$[ebp]
  0022f	89 4d f4	 mov	 DWORD PTR _prev$[ebp], ecx
  00232	8b 55 e0	 mov	 edx, DWORD PTR _bmp_ind$[ebp]
  00235	8b 45 d0	 mov	 eax, DWORD PTR _dest$[ebp]
  00238	8b 4d f4	 mov	 ecx, DWORD PTR _prev$[ebp]
  0023b	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  0023e	eb 12		 jmp	 SHORT $LN26@apply_pale
$LN25@apply_pale:

; 1115 :                   else
; 1116 :                      dest[bmp_ind] = prev = max_iters_color; // max iters color is not xored

  00240	8b 45 b0	 mov	 eax, DWORD PTR _max_iters_color$[ebp]
  00243	89 45 f4	 mov	 DWORD PTR _prev$[ebp], eax
  00246	8b 4d e0	 mov	 ecx, DWORD PTR _bmp_ind$[ebp]
  00249	8b 55 d0	 mov	 edx, DWORD PTR _dest$[ebp]
  0024c	8b 45 f4	 mov	 eax, DWORD PTR _prev$[ebp]
  0024f	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$LN26@apply_pale:

; 1117 :                }
; 1118 :             }

  00252	eb 5b		 jmp	 SHORT $LN28@apply_pale
$LN21@apply_pale:

; 1119 :             else  // can't use the prev optimization with normalized version
; 1120 :                if (iters != max_iters)

  00254	8b 45 fc	 mov	 eax, DWORD PTR _iters$[ebp]
  00257	3b 45 d4	 cmp	 eax, DWORD PTR _max_iters$[ebp]
  0025a	74 47		 je	 SHORT $LN27@apply_pale

; 1121 :                   dest[bmp_ind] = get_normalized_color_nolookup(src[iter_ind], pal, n,

  0025c	8b 45 dc	 mov	 eax, DWORD PTR _iter_ind$[ebp]
  0025f	8b 4d cc	 mov	 ecx, DWORD PTR _src$[ebp]
  00262	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00265	8b 45 a8	 mov	 eax, DWORD PTR _m$[ebp]
  00268	8b 88 ec 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36332]
  0026e	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  00273	83 ec 08	 sub	 esp, 8
  00276	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0027b	8b 55 b4	 mov	 edx, DWORD PTR _n$[ebp]
  0027e	52		 push	 edx
  0027f	8b 45 b8	 mov	 eax, DWORD PTR _pal$[ebp]
  00282	50		 push	 eax
  00283	8b 4d dc	 mov	 ecx, DWORD PTR _iter_ind$[ebp]
  00286	8b 55 cc	 mov	 edx, DWORD PTR _src$[ebp]
  00289	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _get_normalized_color_nolookup
  00292	83 c4 14	 add	 esp, 20			; 00000014H
  00295	33 45 d8	 xor	 eax, DWORD PTR _pal_xor$[ebp]
  00298	8b 4d e0	 mov	 ecx, DWORD PTR _bmp_ind$[ebp]
  0029b	8b 55 d0	 mov	 edx, DWORD PTR _dest$[ebp]
  0029e	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  002a1	eb 0c		 jmp	 SHORT $LN28@apply_pale
$LN27@apply_pale:

; 1122 :                                   MAG(m, &src[iter_ind])) ^ pal_xor;
; 1123 :                else
; 1124 :                   dest[bmp_ind] = max_iters_color;

  002a3	8b 45 e0	 mov	 eax, DWORD PTR _bmp_ind$[ebp]
  002a6	8b 4d d0	 mov	 ecx, DWORD PTR _dest$[ebp]
  002a9	8b 55 b0	 mov	 edx, DWORD PTR _max_iters_color$[ebp]
  002ac	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN28@apply_pale:

; 1125 : 
; 1126 :             bmp_ind++;

  002af	8b 45 e0	 mov	 eax, DWORD PTR _bmp_ind$[ebp]
  002b2	83 c0 01	 add	 eax, 1
  002b5	89 45 e0	 mov	 DWORD PTR _bmp_ind$[ebp], eax

; 1127 :             iter_ind++;

  002b8	8b 45 dc	 mov	 eax, DWORD PTR _iter_ind$[ebp]
  002bb	83 c0 01	 add	 eax, 1
  002be	89 45 dc	 mov	 DWORD PTR _iter_ind$[ebp], eax

; 1128 :          }

  002c1	e9 0c ff ff ff	 jmp	 $LN14@apply_pale
$LN15@apply_pale:

; 1129 :          bmp_line += bmp_line_size;

  002c6	8b 45 e8	 mov	 eax, DWORD PTR _bmp_line$[ebp]
  002c9	03 45 c4	 add	 eax, DWORD PTR _bmp_line_size$[ebp]
  002cc	89 45 e8	 mov	 DWORD PTR _bmp_line$[ebp], eax

; 1130 :          iter_line += iter_line_size;

  002cf	8b 45 e4	 mov	 eax, DWORD PTR _iter_line$[ebp]
  002d2	03 45 c8	 add	 eax, DWORD PTR _iter_line_size$[ebp]
  002d5	89 45 e4	 mov	 DWORD PTR _iter_line$[ebp], eax

; 1131 :       }

  002d8	e9 cb fe ff ff	 jmp	 $LN11@apply_pale
$LN12@apply_pale:

; 1132 :    }
; 1133 :    // Tell the master thread we're done. Thread 0 is the master thread, so doesn't need to signal
; 1134 :    if (p->thread_num > 0)

  002dd	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  002e0	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  002e4	7e 17		 jle	 SHORT $LN29@apply_pale

; 1135 :       SetEvent(m->pal_events[p->thread_num]);

  002e6	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  002e9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002ec	8b 55 a8	 mov	 edx, DWORD PTR _m$[ebp]
  002ef	8b 84 8a 88 92
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+37512]
  002f6	50		 push	 eax
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
$LN29@apply_pale:

; 1136 :    return 0;

  002fd	33 c0		 xor	 eax, eax

; 1137 : }

  002ff	5f		 pop	 edi
  00300	5e		 pop	 esi
  00301	5b		 pop	 ebx
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c2 04 00	 ret	 4
_apply_palette_threaded@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _get_normalized_color_nolookup
_TEXT	SEGMENT
_b$ = -32						; size = 4
_g$ = -28						; size = 4
_r$ = -24						; size = 4
_s2$ = -20						; size = 4
_s1$ = -16						; size = 4
_c2$ = -12						; size = 4
_c1$ = -8						; size = 4
_ind$ = -4						; size = 4
_iters$ = 8						; size = 4
_pal$ = 12						; size = 4
_pal_size_m1$ = 16					; size = 4
_magsq$ = 20						; size = 8
_get_normalized_color_nolookup PROC			; COMDAT

; 1012 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1013 :    unsigned ind, c1, c2, s1, s2, r, g, b;
; 1014 : 
; 1015 :    // Iters is already checked against max_iters before this is called
; 1016 :    c1 = pal[(iters - 1) % pal_size_m1 + 1];

  00009	8b 45 08	 mov	 eax, DWORD PTR _iters$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	33 d2		 xor	 edx, edx
  00011	f7 75 10	 div	 DWORD PTR _pal_size_m1$[ebp]
  00014	8b 45 0c	 mov	 eax, DWORD PTR _pal$[ebp]
  00017	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  0001b	89 4d f8	 mov	 DWORD PTR _c1$[ebp], ecx

; 1017 :    c2 = pal[iters % pal_size_m1 + 1];

  0001e	8b 45 08	 mov	 eax, DWORD PTR _iters$[ebp]
  00021	33 d2		 xor	 edx, edx
  00023	f7 75 10	 div	 DWORD PTR _pal_size_m1$[ebp]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _pal$[ebp]
  00029	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  0002d	89 4d f4	 mov	 DWORD PTR _c2$[ebp], ecx

; 1018 : 
; 1019 :    //ind = (unsigned) (magsq * MAGSQ_SCALE_FACTOR);
; 1020 :    __asm
; 1021 :    {
; 1022 :       fld   magsq

  00030	dd 45 14	 fld	 QWORD PTR _magsq$[ebp]

; 1023 :       fmul  magsq_scale_factor

  00033	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _magsq_scale_factor

; 1024 :       fistp ind

  00039	db 5d fc	 fistp	 DWORD PTR _ind$[ebp]

; 1025 :    }
; 1026 : 
; 1027 :    if (ind >= NUM_ELEM(interp_table))

  0003c	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _ind$[ebp], 512 ; 00000200H
  00043	72 07		 jb	 SHORT $LN2@get_normal

; 1028 :       ind = NUM_ELEM(interp_table) - 1;

  00045	c7 45 fc ff 01
	00 00		 mov	 DWORD PTR _ind$[ebp], 511 ; 000001ffH
$LN2@get_normal:

; 1029 : 
; 1030 :    s1 = interp_table[ind];

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _ind$[ebp]
  0004f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _interp_table[eax*4]
  00056	89 4d f0	 mov	 DWORD PTR _s1$[ebp], ecx

; 1031 :    s2 = 0x100 - s1;

  00059	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0005e	2b 45 f0	 sub	 eax, DWORD PTR _s1$[ebp]
  00061	89 45 ec	 mov	 DWORD PTR _s2$[ebp], eax

; 1032 : 
; 1033 :    r = (c1 & 0xFF0000) * s1 + (c2 & 0xFF0000) * s2;  // final R in bits 31-24

  00064	8b 45 f8	 mov	 eax, DWORD PTR _c1$[ebp]
  00067	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0006c	0f af 45 f0	 imul	 eax, DWORD PTR _s1$[ebp]
  00070	8b 4d f4	 mov	 ecx, DWORD PTR _c2$[ebp]
  00073	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00079	0f af 4d ec	 imul	 ecx, DWORD PTR _s2$[ebp]
  0007d	03 c1		 add	 eax, ecx
  0007f	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 1034 :    g = (c1 & 0x00FF00) * s1 + (c2 & 0x00FF00) * s2;  // final G in bits 23-16

  00082	8b 45 f8	 mov	 eax, DWORD PTR _c1$[ebp]
  00085	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0008a	0f af 45 f0	 imul	 eax, DWORD PTR _s1$[ebp]
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR _c2$[ebp]
  00091	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00097	0f af 4d ec	 imul	 ecx, DWORD PTR _s2$[ebp]
  0009b	03 c1		 add	 eax, ecx
  0009d	89 45 e4	 mov	 DWORD PTR _g$[ebp], eax

; 1035 :    b = (c1 & 0x0000FF) * s1 + (c2 & 0x0000FF) * s2;  // final B in bits 15-8

  000a0	8b 45 f8	 mov	 eax, DWORD PTR _c1$[ebp]
  000a3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a8	0f af 45 f0	 imul	 eax, DWORD PTR _s1$[ebp]
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR _c2$[ebp]
  000af	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000b5	0f af 4d ec	 imul	 ecx, DWORD PTR _s2$[ebp]
  000b9	03 c1		 add	 eax, ecx
  000bb	89 45 e0	 mov	 DWORD PTR _b$[ebp], eax

; 1036 : 
; 1037 :    return ((r & 0xFF000000) | (g & 0x00FF0000) | b) >> 8;

  000be	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  000c1	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  000c6	8b 4d e4	 mov	 ecx, DWORD PTR _g$[ebp]
  000c9	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  000cf	0b c1		 or	 eax, ecx
  000d1	0b 45 e0	 or	 eax, DWORD PTR _b$[ebp]
  000d4	c1 e8 08	 shr	 eax, 8

; 1038 : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_get_normalized_color_nolookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _get_normalized_color
_TEXT	SEGMENT
_b$ = -32						; size = 4
_g$ = -28						; size = 4
_r$ = -24						; size = 4
_s2$ = -20						; size = 4
_s1$ = -16						; size = 4
_c2$ = -12						; size = 4
_c1$ = -8						; size = 4
_ind$ = -4						; size = 4
_m$ = 8							; size = 4
_iters$ = 12						; size = 4
_magsq$ = 16						; size = 8
_get_normalized_color PROC				; COMDAT

; 956  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 957  :    unsigned ind, c1, c2, s1, s2, r, g, b;
; 958  : 
; 959  :    c1 = m->pal_lookup[iters - 1];

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iters$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0000f	8b 94 81 04 93
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+37636]
  00016	89 55 f8	 mov	 DWORD PTR _c1$[ebp], edx

; 960  :    c2 = m->pal_lookup[iters];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _iters$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0001f	8b 94 81 08 93
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+37640]
  00026	89 55 f4	 mov	 DWORD PTR _c2$[ebp], edx

; 961  : 
; 962  :    if (iters == m->max_iters)

  00029	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _iters$[ebp]
  0002f	3b 88 c0 8d 00
	00		 cmp	 ecx, DWORD PTR [eax+36288]
  00035	75 08		 jne	 SHORT $LN2@get_normal

; 963  :       return c2;

  00037	8b 45 f4	 mov	 eax, DWORD PTR _c2$[ebp]
  0003a	e9 a7 00 00 00	 jmp	 $LN1@get_normal
$LN2@get_normal:

; 964  : 
; 965  :    // Get the index into the scale factor table from the magnitude squared
; 966  : 
; 967  :    // 2 is a good value for MAGSQ_SCALE_FACTOR with a diverged_thresh of 16. This would have to
; 968  :    // be increased with a diverged_thresh of 4 to get the same accuracy.
; 969  : 
; 970  :    // ind = (unsigned) (magsq * MAGSQ_SCALE_FACTOR); // zoomtest 28.0s
; 971  : 
; 972  :    // ASM version that's similar to the above without all the painful x87 control
; 973  :    // word manipulation to set truncation mode. Would actually rather have rounding here.
; 974  : 
; 975  :    __asm  // zoomtest 25.7s
; 976  :    {
; 977  :       fld   magsq

  0003f	dd 45 10	 fld	 QWORD PTR _magsq$[ebp]

; 978  :       fmul  magsq_scale_factor

  00042	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _magsq_scale_factor

; 979  :       fistp ind

  00048	db 5d fc	 fistp	 DWORD PTR _ind$[ebp]

; 980  :    }
; 981  : 
; 982  :    // Rare to get a magnitude >= the table size (i.e., the point magsq was more than
; 983  :    // diverged_thresh^2) so this branch should be predicted correctly most of the time
; 984  :    if (ind >= NUM_ELEM(interp_table))

  0004b	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _ind$[ebp], 512 ; 00000200H
  00052	72 07		 jb	 SHORT $LN3@get_normal

; 985  :       ind = NUM_ELEM(interp_table) - 1;

  00054	c7 45 fc ff 01
	00 00		 mov	 DWORD PTR _ind$[ebp], 511 ; 000001ffH
$LN3@get_normal:

; 986  : 
; 987  :    // Uncomment the line below to test the speed of a possible brute-force lookup version.
; 988  :    // return interp_table[ind & 0xff]; // zoomtest 24.1s
; 989  : 
; 990  :    // The s1's range between 0 and 1 (scaled up by 256 to allow integer multiplication).
; 991  :    s1 = interp_table[ind];

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _ind$[ebp]
  0005e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _interp_table[eax*4]
  00065	89 4d f0	 mov	 DWORD PTR _s1$[ebp], ecx

; 992  :    s2 = 0x100 - s1;

  00068	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0006d	2b 45 f0	 sub	 eax, DWORD PTR _s1$[ebp]
  00070	89 45 ec	 mov	 DWORD PTR _s2$[ebp], eax

; 993  : 
; 994  :    // Interpolate between the RGB values for successive palette entries.
; 995  :    // Have separate r,g,b entries in palettes to avoid the need for ANDing?
; 996  : 
; 997  :    r = (c1 & 0xFF0000) * s1 + (c2 & 0xFF0000) * s2; // final R in bits 31-24

  00073	8b 45 f8	 mov	 eax, DWORD PTR _c1$[ebp]
  00076	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0007b	0f af 45 f0	 imul	 eax, DWORD PTR _s1$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _c2$[ebp]
  00082	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00088	0f af 4d ec	 imul	 ecx, DWORD PTR _s2$[ebp]
  0008c	03 c1		 add	 eax, ecx
  0008e	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 998  :    g = (c1 & 0x00FF00) * s1 + (c2 & 0x00FF00) * s2; // final G in bits 23-16

  00091	8b 45 f8	 mov	 eax, DWORD PTR _c1$[ebp]
  00094	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00099	0f af 45 f0	 imul	 eax, DWORD PTR _s1$[ebp]
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR _c2$[ebp]
  000a0	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  000a6	0f af 4d ec	 imul	 ecx, DWORD PTR _s2$[ebp]
  000aa	03 c1		 add	 eax, ecx
  000ac	89 45 e4	 mov	 DWORD PTR _g$[ebp], eax

; 999  :    b = (c1 & 0x0000FF) * s1 + (c2 & 0x0000FF) * s2; // final B in bits 15-8

  000af	8b 45 f8	 mov	 eax, DWORD PTR _c1$[ebp]
  000b2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000b7	0f af 45 f0	 imul	 eax, DWORD PTR _s1$[ebp]
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _c2$[ebp]
  000be	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000c4	0f af 4d ec	 imul	 ecx, DWORD PTR _s2$[ebp]
  000c8	03 c1		 add	 eax, ecx
  000ca	89 45 e0	 mov	 DWORD PTR _b$[ebp], eax

; 1000 : 
; 1001 :    // Ouch, lots of calculations
; 1002 :    return ((r & 0xFF000000) | (g & 0x00FF0000) | b) >> 8;

  000cd	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  000d0	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  000d5	8b 4d e4	 mov	 ecx, DWORD PTR _g$[ebp]
  000d8	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  000de	0b c1		 or	 eax, ecx
  000e0	0b 45 e0	 or	 eax, DWORD PTR _b$[ebp]
  000e3	c1 e8 08	 shr	 eax, 8
$LN1@get_normal:

; 1003 : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_get_normalized_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _realloc_user_palette
_TEXT	SEGMENT
tv71 = -68						; size = 4
_n$ = 8							; size = 4
_realloc_user_palette PROC				; COMDAT

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 733  :    free(palettes[NUM_PALETTES].rgb);

  00009	b8 08 00 00 00	 mov	 eax, 8
  0000e	6b c8 0e	 imul	 ecx, eax, 14
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _palettes[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4

; 734  :    if ((palettes[NUM_PALETTES].rgb = (unsigned *) malloc(n * sizeof(palettes[NUM_PALETTES].rgb[0]))) == NULL)

  00020	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00023	c1 e0 02	 shl	 eax, 2
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _malloc
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 bc	 mov	 DWORD PTR tv71[ebp], eax
  00032	b9 08 00 00 00	 mov	 ecx, 8
  00037	6b d1 0e	 imul	 edx, ecx, 14
  0003a	8b 45 bc	 mov	 eax, DWORD PTR tv71[ebp]
  0003d	89 82 00 00 00
	00		 mov	 DWORD PTR _palettes[edx], eax
  00043	83 7d bc 00	 cmp	 DWORD PTR tv71[ebp], 0
  00047	75 04		 jne	 SHORT $LN2@realloc_us

; 735  :       return 0;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 0d		 jmp	 SHORT $LN1@realloc_us
$LN2@realloc_us:

; 736  :    cur_user_palette_size = n;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00050	a3 00 00 00 00	 mov	 DWORD PTR _cur_user_palette_size, eax

; 737  :    return 1;

  00055	b8 01 00 00 00	 mov	 eax, 1
$LN1@realloc_us:

; 738  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_realloc_user_palette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _get_unsigned
_TEXT	SEGMENT
_have_num$ = -16					; size = 4
_mult$ = -12						; size = 4
_num$ = -8						; size = 4
_c$ = -4						; size = 4
_ind$ = 8						; size = 4
_str$ = 12						; size = 4
_size$ = 16						; size = 4
_val$ = 20						; size = 4
_get_unsigned PROC					; COMDAT

; 639  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 640  :    unsigned c, num, mult, have_num;
; 641  : 
; 642  :    if (ind < 0 || ind >= size)

  00009	83 7d 08 00	 cmp	 DWORD PTR _ind$[ebp], 0
  0000d	7c 08		 jl	 SHORT $LN6@get_unsign
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ind$[ebp]
  00012	3b 45 10	 cmp	 eax, DWORD PTR _size$[ebp]
  00015	7c 08		 jl	 SHORT $LN5@get_unsign
$LN6@get_unsign:

; 643  :       return -1;

  00017	83 c8 ff	 or	 eax, -1
  0001a	e9 f5 00 00 00	 jmp	 $LN1@get_unsign
$LN5@get_unsign:

; 644  : 
; 645  :    num = 0;

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _num$[ebp], 0

; 646  :    mult = 10;

  00026	c7 45 f4 0a 00
	00 00		 mov	 DWORD PTR _mult$[ebp], 10 ; 0000000aH

; 647  :    have_num = 0;

  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _have_num$[ebp], 0

; 648  :    for (; ind < size; ind++)

  00034	eb 09		 jmp	 SHORT $LN4@get_unsign
$LN2@get_unsign:
  00036	8b 45 08	 mov	 eax, DWORD PTR _ind$[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 08	 mov	 DWORD PTR _ind$[ebp], eax
$LN4@get_unsign:
  0003f	8b 45 08	 mov	 eax, DWORD PTR _ind$[ebp]
  00042	3b 45 10	 cmp	 eax, DWORD PTR _size$[ebp]
  00045	0f 8d c6 00 00
	00		 jge	 $LN3@get_unsign

; 649  :    {
; 650  :       c = str[ind];

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  0004e	03 45 08	 add	 eax, DWORD PTR _ind$[ebp]
  00051	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00054	89 4d fc	 mov	 DWORD PTR _c$[ebp], ecx

; 651  : 
; 652  :       if (ISWHITE(c) || !c) // whitespace or end of line terminates current number

  00057	83 7d fc 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  0005b	74 18		 je	 SHORT $LN8@get_unsign
  0005d	83 7d fc 09	 cmp	 DWORD PTR _c$[ebp], 9
  00061	74 12		 je	 SHORT $LN8@get_unsign
  00063	83 7d fc 2c	 cmp	 DWORD PTR _c$[ebp], 44	; 0000002cH
  00067	74 0c		 je	 SHORT $LN8@get_unsign
  00069	83 7d fc 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  0006d	74 06		 je	 SHORT $LN8@get_unsign
  0006f	83 7d fc 00	 cmp	 DWORD PTR _c$[ebp], 0
  00073	75 25		 jne	 SHORT $LN7@get_unsign
$LN8@get_unsign:

; 653  :       {
; 654  :          if (have_num)

  00075	83 7d f0 00	 cmp	 DWORD PTR _have_num$[ebp], 0
  00079	74 12		 je	 SHORT $LN9@get_unsign

; 655  :          {
; 656  :             *val = num;

  0007b	8b 45 14	 mov	 eax, DWORD PTR _val$[ebp]
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _num$[ebp]
  00081	89 08		 mov	 DWORD PTR [eax], ecx

; 657  :             return ind;

  00083	8b 45 08	 mov	 eax, DWORD PTR _ind$[ebp]
  00086	e9 89 00 00 00	 jmp	 $LN1@get_unsign

; 658  :          }

  0008b	eb 08		 jmp	 SHORT $LN10@get_unsign
$LN9@get_unsign:

; 659  :          else if (c)        // skip whitespace if no number yet

  0008d	83 7d fc 00	 cmp	 DWORD PTR _c$[ebp], 0
  00091	74 02		 je	 SHORT $LN10@get_unsign

; 660  :             continue;

  00093	eb a1		 jmp	 SHORT $LN2@get_unsign
$LN10@get_unsign:

; 661  :          return -1;         // no number yet and end of line reached: invalid

  00095	83 c8 ff	 or	 eax, -1
  00098	eb 7a		 jmp	 SHORT $LN1@get_unsign
$LN7@get_unsign:

; 662  :       }
; 663  : 
; 664  :       // 'x' or 'X' chars, indicating a hex number, can have an arbitrary number
; 665  :       // of leading 0's in front of them (including none).
; 666  :       if (TOLOWER(c) == 'x')

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  0009d	83 c8 20	 or	 eax, 32			; 00000020H
  000a0	83 f8 78	 cmp	 eax, 120		; 00000078H
  000a3	75 17		 jne	 SHORT $LN12@get_unsign

; 667  :       {
; 668  :          if (num)       // got an 'x' and already have a number: bad value

  000a5	83 7d f8 00	 cmp	 DWORD PTR _num$[ebp], 0
  000a9	74 05		 je	 SHORT $LN13@get_unsign

; 669  :             return -1;

  000ab	83 c8 ff	 or	 eax, -1
  000ae	eb 64		 jmp	 SHORT $LN1@get_unsign
$LN13@get_unsign:

; 670  :          mult = 16;     // else go to hex mode

  000b0	c7 45 f4 10 00
	00 00		 mov	 DWORD PTR _mult$[ebp], 16 ; 00000010H

; 671  :          continue;

  000b7	e9 7a ff ff ff	 jmp	 $LN2@get_unsign
$LN12@get_unsign:

; 672  :       }
; 673  : 
; 674  :       // Check for valid digits. Only accept hex digits if in hex mode.
; 675  :       if ((c - '0') <= 9)              // check dec digits; c must be unsigned

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  000bf	83 e8 30	 sub	 eax, 48			; 00000030H
  000c2	83 f8 09	 cmp	 eax, 9
  000c5	77 13		 ja	 SHORT $LN14@get_unsign

; 676  :          num = num * mult + c - '0';

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _num$[ebp]
  000ca	0f af 45 f4	 imul	 eax, DWORD PTR _mult$[ebp]
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _c$[ebp]
  000d1	8d 54 08 d0	 lea	 edx, DWORD PTR [eax+ecx-48]
  000d5	89 55 f8	 mov	 DWORD PTR _num$[ebp], edx
  000d8	eb 2b		 jmp	 SHORT $LN15@get_unsign
$LN14@get_unsign:

; 677  :       else
; 678  :       {
; 679  :          c = TOLOWER(c) - 'a' + 10;    // check hex digits and if in hex mode

  000da	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  000dd	83 c8 20	 or	 eax, 32			; 00000020H
  000e0	83 e8 57	 sub	 eax, 87			; 00000057H
  000e3	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 680  :          if (c <= 15 && mult == 16)

  000e6	83 7d fc 0f	 cmp	 DWORD PTR _c$[ebp], 15	; 0000000fH
  000ea	77 14		 ja	 SHORT $LN16@get_unsign
  000ec	83 7d f4 10	 cmp	 DWORD PTR _mult$[ebp], 16 ; 00000010H
  000f0	75 0e		 jne	 SHORT $LN16@get_unsign

; 681  :             num = (num << 4) + c;

  000f2	8b 45 f8	 mov	 eax, DWORD PTR _num$[ebp]
  000f5	c1 e0 04	 shl	 eax, 4
  000f8	03 45 fc	 add	 eax, DWORD PTR _c$[ebp]
  000fb	89 45 f8	 mov	 DWORD PTR _num$[ebp], eax
  000fe	eb 05		 jmp	 SHORT $LN15@get_unsign
$LN16@get_unsign:

; 682  :          else
; 683  :             return -1;

  00100	83 c8 ff	 or	 eax, -1
  00103	eb 0f		 jmp	 SHORT $LN1@get_unsign
$LN15@get_unsign:

; 684  :       }
; 685  :       have_num = 1;

  00105	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _have_num$[ebp], 1

; 686  :    }

  0010c	e9 25 ff ff ff	 jmp	 $LN2@get_unsign
$LN3@get_unsign:

; 687  :    return -1; // should never get here, unless line contains no ending null character

  00111	83 c8 ff	 or	 eax, -1
$LN1@get_unsign:

; 688  : }

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
_get_unsigned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _apply_palette
_TEXT	SEGMENT
_p$ = -40						; size = 4
_max_iters$ = -36					; size = 4
_palette_num$ = -32					; size = 4
_mi_color$ = -28					; size = 4
_nt$ = -24						; size = 4
_step$ = -20						; size = 4
_mod$ = -16						; size = 4
_i$ = -12						; size = 4
_pal$ = -8						; size = 4
_n$ = -4						; size = 4
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_src$ = 16						; size = 4
_xsize$ = 20						; size = 4
_ysize$ = 24						; size = 4
_apply_palette PROC					; COMDAT

; 1157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1158 :    unsigned n, *pal, i, mod, step, nt, mi_color, palette_num, max_iters;
; 1159 :    pal_work *p;
; 1160 : 
; 1161 :    // NUM_PALETTES is the index used for the user palette.
; 1162 : 
; 1163 :    palette_num = m->palette;

  00009	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0000c	8b 88 f4 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36340]
  00012	89 4d e0	 mov	 DWORD PTR _palette_num$[ebp], ecx

; 1164 : 
; 1165 :    if (palette_num > num_valid_palettes - 1) // num_valid_palettes is NUM_PALETTES if a user

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_valid_palettes
  0001a	83 e8 01	 sub	 eax, 1
  0001d	39 45 e0	 cmp	 DWORD PTR _palette_num$[ebp], eax
  00020	76 0b		 jbe	 SHORT $LN11@apply_pale

; 1166 :       palette_num = num_valid_palettes - 1;  // palette hasn't been loaded, else NUM_PALETTES + 1.

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_valid_palettes
  00027	83 e8 01	 sub	 eax, 1
  0002a	89 45 e0	 mov	 DWORD PTR _palette_num$[ebp], eax
$LN11@apply_pale:

; 1167 : 
; 1168 :    pal = palettes[palette_num].rgb;

  0002d	8b 45 e0	 mov	 eax, DWORD PTR _palette_num$[ebp]
  00030	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _palettes[eax*8]
  00037	89 4d f8	 mov	 DWORD PTR _pal$[ebp], ecx

; 1169 :    n = palettes[palette_num].size - 1;

  0003a	8b 45 e0	 mov	 eax, DWORD PTR _palette_num$[ebp]
  0003d	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _palettes[eax*8+4]
  00044	83 e9 01	 sub	 ecx, 1
  00047	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 1170 : 
; 1171 :    // Max iters color logic: any nonzero value (from either the palette or a logfile/quickman.cfg)
; 1172 :    // overrides a zero value. If both are nonzero, the logfile value takes precedence. Max iters
; 1173 :    // color is not inverted (add xor here to cancel out the one in the mapping loop).
; 1174 : 
; 1175 :    mi_color = m->max_iters_color ^ m->pal_xor;  // default: from logfile/quickman.cfg

  0004a	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00050	8b 90 00 8e 00
	00		 mov	 edx, DWORD PTR [eax+36352]
  00056	33 91 fc 8d 00
	00		 xor	 edx, DWORD PTR [ecx+36348]
  0005c	89 55 e4	 mov	 DWORD PTR _mi_color$[ebp], edx

; 1176 :    if (pal[0] > 0 && !m->max_iters_color)       // palette color overrides if nonzero and other is 0

  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	6b c8 00	 imul	 ecx, eax, 0
  00067	8b 55 f8	 mov	 edx, DWORD PTR _pal$[ebp]
  0006a	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  0006e	76 26		 jbe	 SHORT $LN12@apply_pale
  00070	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00073	83 b8 00 8e 00
	00 00		 cmp	 DWORD PTR [eax+36352], 0
  0007a	75 1a		 jne	 SHORT $LN12@apply_pale

; 1177 :       mi_color = pal[0] ^ m->pal_xor;

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	6b c8 00	 imul	 ecx, eax, 0
  00084	8b 55 f8	 mov	 edx, DWORD PTR _pal$[ebp]
  00087	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0008a	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0008d	33 88 fc 8d 00
	00		 xor	 ecx, DWORD PTR [eax+36348]
  00093	89 4d e4	 mov	 DWORD PTR _mi_color$[ebp], ecx
$LN12@apply_pale:

; 1178 : 
; 1179 :    max_iters = m->max_iters;

  00096	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00099	8b 88 c0 8d 00
	00		 mov	 ecx, DWORD PTR [eax+36288]
  0009f	89 4d dc	 mov	 DWORD PTR _max_iters$[ebp], ecx

; 1180 :    // Make a new color lookup table if max iters is small enough, and palette or max iters changed
; 1181 :    if (max_iters <= PAL_LOOKUP_MAX)

  000a2	81 7d dc 00 80
	00 00		 cmp	 DWORD PTR _max_iters$[ebp], 32768 ; 00008000H
  000a9	0f 87 89 00 00
	00		 ja	 $LN13@apply_pale

; 1182 :    {
; 1183 :       if (palette_num != m->prev_pal || max_iters != m->max_iters_last)

  000af	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  000b2	8b 4d e0	 mov	 ecx, DWORD PTR _palette_num$[ebp]
  000b5	3b 88 f8 8d 00
	00		 cmp	 ecx, DWORD PTR [eax+36344]
  000bb	75 0e		 jne	 SHORT $LN15@apply_pale
  000bd	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  000c0	8b 4d dc	 mov	 ecx, DWORD PTR _max_iters$[ebp]
  000c3	3b 88 c4 8d 00
	00		 cmp	 ecx, DWORD PTR [eax+36292]
  000c9	74 5d		 je	 SHORT $LN14@apply_pale
$LN15@apply_pale:

; 1184 :       {
; 1185 :          for (i = mod = 0; i < max_iters; i++)

  000cb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _mod$[ebp], 0
  000d2	8b 45 f0	 mov	 eax, DWORD PTR _mod$[ebp]
  000d5	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  000d8	eb 09		 jmp	 SHORT $LN4@apply_pale
$LN2@apply_pale:
  000da	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apply_pale:
  000e3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	3b 45 dc	 cmp	 eax, DWORD PTR _max_iters$[ebp]
  000e9	73 31		 jae	 SHORT $LN3@apply_pale

; 1186 :          {
; 1187 :             // Equivalent to this slow form: pal_lookup[i] = p[i % n + 1];
; 1188 :             if (mod == n)

  000eb	8b 45 f0	 mov	 eax, DWORD PTR _mod$[ebp]
  000ee	3b 45 fc	 cmp	 eax, DWORD PTR _n$[ebp]
  000f1	75 07		 jne	 SHORT $LN16@apply_pale

; 1189 :                mod = 0;

  000f3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _mod$[ebp], 0
$LN16@apply_pale:

; 1190 :             m->pal_lookup[i] = pal[mod + 1];

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00100	8b 55 f0	 mov	 edx, DWORD PTR _mod$[ebp]
  00103	8b 75 f8	 mov	 esi, DWORD PTR _pal$[ebp]
  00106	8b 54 96 04	 mov	 edx, DWORD PTR [esi+edx*4+4]
  0010a	89 94 81 08 93
	00 00		 mov	 DWORD PTR [ecx+eax*4+37640], edx

; 1191 :             mod++;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _mod$[ebp]
  00114	83 c0 01	 add	 eax, 1
  00117	89 45 f0	 mov	 DWORD PTR _mod$[ebp], eax

; 1192 :          }

  0011a	eb be		 jmp	 SHORT $LN2@apply_pale
$LN3@apply_pale:

; 1193 :          m->prev_pal = palette_num;

  0011c	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0011f	8b 4d e0	 mov	 ecx, DWORD PTR _palette_num$[ebp]
  00122	89 88 f8 8d 00
	00		 mov	 DWORD PTR [eax+36344], ecx
$LN14@apply_pale:

; 1194 :       }
; 1195 :       m->pal_lookup[max_iters] = mi_color;

  00128	8b 45 dc	 mov	 eax, DWORD PTR _max_iters$[ebp]
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0012e	8b 55 e4	 mov	 edx, DWORD PTR _mi_color$[ebp]
  00131	89 94 81 08 93
	00 00		 mov	 DWORD PTR [ecx+eax*4+37640], edx
$LN13@apply_pale:

; 1196 :    }
; 1197 : 
; 1198 :    // Multithread the palette mapping if the number of pixels to be done is > some minimum.
; 1199 :    // Otherwise use a single thread, since threading overhead would dominate the time.
; 1200 : 
; 1201 :    nt = num_threads;

  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_threads
  0013d	89 45 e8	 mov	 DWORD PTR _nt$[ebp], eax

; 1202 :    if (xsize * ysize < MIN_THREADED_PAL_MAP)

  00140	8b 45 14	 mov	 eax, DWORD PTR _xsize$[ebp]
  00143	0f af 45 18	 imul	 eax, DWORD PTR _ysize$[ebp]
  00147	3d 40 0d 03 00	 cmp	 eax, 200000		; 00030d40H
  0014c	73 07		 jae	 SHORT $LN17@apply_pale

; 1203 :       nt = 1;

  0014e	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _nt$[ebp], 1
$LN17@apply_pale:

; 1204 : 
; 1205 :    p = m->pal_work_array;

  00155	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00158	05 08 8e 00 00	 add	 eax, 36360		; 00008e08H
  0015d	89 45 d8	 mov	 DWORD PTR _p$[ebp], eax

; 1206 : 
; 1207 :    step = ysize / nt;         // always stripe along y axis

  00160	8b 45 18	 mov	 eax, DWORD PTR _ysize$[ebp]
  00163	33 d2		 xor	 edx, edx
  00165	f7 75 e8	 div	 DWORD PTR _nt$[ebp]
  00168	89 45 ec	 mov	 DWORD PTR _step$[ebp], eax

; 1208 :    for (i = 0; i < nt; i++)

  0016b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00172	eb 09		 jmp	 SHORT $LN7@apply_pale
$LN5@apply_pale:
  00174	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00177	83 c0 01	 add	 eax, 1
  0017a	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@apply_pale:
  0017d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00180	3b 45 e8	 cmp	 eax, DWORD PTR _nt$[ebp]
  00183	0f 83 a7 00 00
	00		 jae	 $LN6@apply_pale

; 1209 :    {
; 1210 :       if (i == nt - 1)        // add any remainder onto last thread

  00189	8b 45 e8	 mov	 eax, DWORD PTR _nt$[ebp]
  0018c	83 e8 01	 sub	 eax, 1
  0018f	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  00192	75 12		 jne	 SHORT $LN18@apply_pale

; 1211 :          step += ysize - (step * nt);

  00194	8b 45 ec	 mov	 eax, DWORD PTR _step$[ebp]
  00197	0f af 45 e8	 imul	 eax, DWORD PTR _nt$[ebp]
  0019b	8b 4d 18	 mov	 ecx, DWORD PTR _ysize$[ebp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	03 4d ec	 add	 ecx, DWORD PTR _step$[ebp]
  001a3	89 4d ec	 mov	 DWORD PTR _step$[ebp], ecx
$LN18@apply_pale:

; 1212 : 
; 1213 :       p->calc_struct = (void *) m;

  001a6	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  001ac	89 08		 mov	 DWORD PTR [eax], ecx

; 1214 :       p->dest = dest;

  001ae	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001b1	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  001b4	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1215 :       p->src = src;

  001b7	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001ba	8b 4d 10	 mov	 ecx, DWORD PTR _src$[ebp]
  001bd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1216 :       p->xsize = xsize;

  001c0	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001c3	8b 4d 14	 mov	 ecx, DWORD PTR _xsize$[ebp]
  001c6	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1217 :       p->ysize = step;

  001c9	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001cc	8b 4d ec	 mov	 ecx, DWORD PTR _step$[ebp]
  001cf	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1218 :       p->pal = pal;

  001d2	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001d5	8b 4d f8	 mov	 ecx, DWORD PTR _pal$[ebp]
  001d8	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1219 :       p->pal_size = n;

  001db	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001de	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  001e1	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1220 :       p->max_iters_color = mi_color;

  001e4	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001e7	8b 4d e4	 mov	 ecx, DWORD PTR _mi_color$[ebp]
  001ea	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1221 :       p->thread_num = i;

  001ed	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  001f0	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  001f3	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1222 : 
; 1223 :       dest += step * m->xsize; // bitmap line_size

  001f6	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  001f9	8b 4d ec	 mov	 ecx, DWORD PTR _step$[ebp]
  001fc	0f af 88 88 8d
	00 00		 imul	 ecx, DWORD PTR [eax+36232]
  00203	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00206	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00209	89 45 0c	 mov	 DWORD PTR _dest$[ebp], eax

; 1224 :       src += step * m->iter_data_line_size;

  0020c	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0020f	8b 4d ec	 mov	 ecx, DWORD PTR _step$[ebp]
  00212	0f af 88 e4 8d
	00 00		 imul	 ecx, DWORD PTR [eax+36324]
  00219	8b 55 10	 mov	 edx, DWORD PTR _src$[ebp]
  0021c	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0021f	89 45 10	 mov	 DWORD PTR _src$[ebp], eax

; 1225 :       p++;

  00222	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp]
  00225	83 c0 24	 add	 eax, 36			; 00000024H
  00228	89 45 d8	 mov	 DWORD PTR _p$[ebp], eax

; 1226 :    }

  0022b	e9 44 ff ff ff	 jmp	 $LN5@apply_pale
$LN6@apply_pale:

; 1227 : 
; 1228 :    // If more than one thread, spawn new threads
; 1229 :    for (i = 1; i < nt; i++)

  00230	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00237	eb 09		 jmp	 SHORT $LN10@apply_pale
$LN8@apply_pale:
  00239	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0023c	83 c0 01	 add	 eax, 1
  0023f	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@apply_pale:
  00242	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00245	3b 45 e8	 cmp	 eax, DWORD PTR _nt$[ebp]
  00248	73 21		 jae	 SHORT $LN9@apply_pale

; 1230 :       QueueUserWorkItem(apply_palette_threaded, &m->pal_work_array[i],

  0024a	68 10 00 43 00	 push	 4390928			; 00430010H
  0024f	6b 45 f4 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  00253	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00256	8d 94 01 08 8e
	00 00		 lea	 edx, DWORD PTR [ecx+eax+36360]
  0025d	52		 push	 edx
  0025e	68 00 00 00 00	 push	 OFFSET _apply_palette_threaded@4
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueueUserWorkItem@12
  00269	eb ce		 jmp	 SHORT $LN8@apply_pale
$LN9@apply_pale:

; 1231 :                         WT_EXECUTELONGFUNCTION | (MAX_QUEUE_THREADS << 16));
; 1232 : 
; 1233 :    // Do some (or all) of the work here in the master thread
; 1234 :    apply_palette_threaded(&m->pal_work_array[0]);

  0026b	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  00270	6b c8 00	 imul	 ecx, eax, 0
  00273	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00276	8d 84 0a 08 8e
	00 00		 lea	 eax, DWORD PTR [edx+ecx+36360]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _apply_palette_threaded@4

; 1235 : 
; 1236 :    // Wait till all threads are done
; 1237 :    if (nt > 1)

  00283	83 7d e8 01	 cmp	 DWORD PTR _nt$[ebp], 1
  00287	76 24		 jbe	 SHORT $LN1@apply_pale

; 1238 :       WaitForMultipleObjects(nt - 1, &m->pal_events[1], TRUE, INFINITE);

  00289	6a ff		 push	 -1
  0028b	6a 01		 push	 1
  0028d	b8 04 00 00 00	 mov	 eax, 4
  00292	c1 e0 00	 shl	 eax, 0
  00295	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00298	8d 94 01 88 92
	00 00		 lea	 edx, DWORD PTR [ecx+eax+37512]
  0029f	52		 push	 edx
  002a0	8b 45 e8	 mov	 eax, DWORD PTR _nt$[ebp]
  002a3	83 e8 01	 sub	 eax, 1
  002a6	50		 push	 eax
  002a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForMultipleObjects@16
$LN1@apply_pale:

; 1239 : }

  002ad	5f		 pop	 edi
  002ae	5e		 pop	 esi
  002af	5b		 pop	 ebx
  002b0	8b e5		 mov	 esp, ebp
  002b2	5d		 pop	 ebp
  002b3	c3		 ret	 0
_apply_palette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _get_palette_rgb_val
_TEXT	SEGMENT
_b$ = -16						; size = 4
_g$ = -12						; size = 4
_r$ = -8						; size = 4
_i$ = -4						; size = 4
_ind$ = 8						; size = 4
_str$ = 12						; size = 4
_n$ = 16						; size = 4
_rgb$ = 20						; size = 4
_get_palette_rgb_val PROC				; COMDAT

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 695  :    int i;
; 696  :    unsigned r, g, b;
; 697  : 
; 698  :    if ((i = get_unsigned(ind, str, n, &r)) < 0) // must have at least 1 good one

  00009	8d 45 f8	 lea	 eax, DWORD PTR _r$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _ind$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _get_unsigned
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
  00021	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00024	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00028	7d 04		 jge	 SHORT $LN2@get_palett

; 699  :       return 0;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 74		 jmp	 SHORT $LN1@get_palett
$LN2@get_palett:

; 700  :    i = get_unsigned(i, str, n, &g);

  0002e	8d 45 f4	 lea	 eax, DWORD PTR _g$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00039	52		 push	 edx
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _get_unsigned
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 701  :    i = get_unsigned(i, str, n, &b);

  00049	8d 45 f0	 lea	 eax, DWORD PTR _b$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00054	52		 push	 edx
  00055	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _get_unsigned
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 702  : 
; 703  :    if (i >= 0) // If all 3 were valid, use individual r, g, b values

  00064	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00068	7c 2b		 jl	 SHORT $LN3@get_palett

; 704  :       *rgb = ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0xFF);

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0006d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00072	c1 e0 10	 shl	 eax, 16			; 00000010H
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _g$[ebp]
  00078	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0007e	c1 e1 08	 shl	 ecx, 8
  00081	0b c1		 or	 eax, ecx
  00083	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00086	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0008c	0b c2		 or	 eax, edx
  0008e	8b 4d 14	 mov	 ecx, DWORD PTR _rgb$[ebp]
  00091	89 01		 mov	 DWORD PTR [ecx], eax
  00093	eb 08		 jmp	 SHORT $LN4@get_palett
$LN3@get_palett:

; 705  :    else
; 706  :       *rgb = r; // else consider the first one (r) to be an rgb triplet. Allow 32-bit values

  00095	8b 45 14	 mov	 eax, DWORD PTR _rgb$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0009b	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@get_palett:

; 707  :                 // (palette will ignore them, and this function is used to read normal ints too)
; 708  :    return 1;

  0009d	b8 01 00 00 00	 mov	 eax, 1
$LN1@get_palett:

; 709  : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_get_palette_rgb_val ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _load_palette_from_bmp
_TEXT	SEGMENT
_m$ = -68						; size = 4
_n$ = -64						; size = 4
_i$ = -60						; size = 4
_info$ = -56						; size = 40
_head$ = -16						; size = 14
_fp$ = 8						; size = 4
_load_palette_from_bmp PROC				; COMDAT

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 803  :    BITMAPFILEHEADER head;
; 804  :    BITMAPINFOHEADER info;
; 805  :    unsigned i, n;
; 806  : 
; 807  :    man_calc_struct *m;
; 808  : 
; 809  :    m = &main_man_calc_struct;

  0000c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], OFFSET _main_man_calc_struct

; 810  : 
; 811  :    // Set user palette to invalid by default (if valid, num_valid_palettes will be NUM_PALETTES + 1)
; 812  :    num_valid_palettes = NUM_PALETTES;

  00013	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR _num_valid_palettes, 14 ; 0000000eH

; 813  : 
; 814  :    // Make sure we read good header and info structures and can seek to the start of the
; 815  :    // bitmap data (l->r evaluation order guaranteed). Must have signature "BM" and be
; 816  :    // an uncompressed 24-bit bitmap.
; 817  : 
; 818  :    if (!fread(&head, sizeof(head), 1, fp) || head.bfType != 0x4D42 || // "BM"
; 819  :        !fread(&info, sizeof(info), 1, fp) || info.biSize != sizeof(info) ||
; 820  :        info.biPlanes != 1 || info.biCompression != BI_RGB || info.biBitCount != 24 ||

  0001d	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00020	50		 push	 eax
  00021	6a 01		 push	 1
  00023	6a 0e		 push	 14			; 0000000eH
  00025	8d 4d f0	 lea	 ecx, DWORD PTR _head$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _fread
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	85 c0		 test	 eax, eax
  00033	74 57		 je	 SHORT $LN6@load_palet
  00035	0f b7 45 f0	 movzx	 eax, WORD PTR _head$[ebp]
  00039	3d 42 4d 00 00	 cmp	 eax, 19778		; 00004d42H
  0003e	75 4c		 jne	 SHORT $LN6@load_palet
  00040	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00043	50		 push	 eax
  00044	6a 01		 push	 1
  00046	6a 28		 push	 40			; 00000028H
  00048	8d 4d c8	 lea	 ecx, DWORD PTR _info$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _fread
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	74 34		 je	 SHORT $LN6@load_palet
  00058	83 7d c8 28	 cmp	 DWORD PTR _info$[ebp], 40 ; 00000028H
  0005c	75 2e		 jne	 SHORT $LN6@load_palet
  0005e	0f b7 45 d4	 movzx	 eax, WORD PTR _info$[ebp+12]
  00062	83 f8 01	 cmp	 eax, 1
  00065	75 25		 jne	 SHORT $LN6@load_palet
  00067	83 7d d8 00	 cmp	 DWORD PTR _info$[ebp+16], 0
  0006b	75 1f		 jne	 SHORT $LN6@load_palet
  0006d	0f b7 45 d6	 movzx	 eax, WORD PTR _info$[ebp+14]
  00071	83 f8 18	 cmp	 eax, 24			; 00000018H
  00074	75 16		 jne	 SHORT $LN6@load_palet
  00076	6a 00		 push	 0
  00078	8b 45 fa	 mov	 eax, DWORD PTR _head$[ebp+10]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _fseek
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	85 c0		 test	 eax, eax
  0008a	74 07		 je	 SHORT $LN5@load_palet
$LN6@load_palet:

; 821  :        fseek(fp, head.bfOffBits, SEEK_SET))
; 822  :       return 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 e2 00 00 00	 jmp	 $LN1@load_palet
$LN5@load_palet:

; 823  : 
; 824  :    // Read in WIDTH 24-bit values. Limit any insane palette sizes from corrupted files
; 825  :    if ((n = info.biWidth) > MAX_PALETTE_SIZE)

  00093	8b 45 cc	 mov	 eax, DWORD PTR _info$[ebp+4]
  00096	89 45 c0	 mov	 DWORD PTR _n$[ebp], eax
  00099	81 7d c0 00 00
	40 00		 cmp	 DWORD PTR _n$[ebp], 4194304 ; 00400000H
  000a0	76 07		 jbe	 SHORT $LN7@load_palet

; 826  :       return 0;

  000a2	33 c0		 xor	 eax, eax
  000a4	e9 cc 00 00 00	 jmp	 $LN1@load_palet
$LN7@load_palet:

; 827  : 
; 828  :    // If palette is too big to fit in the array, need to reallocate and start over.
; 829  :    if (++n > cur_user_palette_size) // Add 1 for max_iters (1st entry)

  000a9	8b 45 c0	 mov	 eax, DWORD PTR _n$[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	89 45 c0	 mov	 DWORD PTR _n$[ebp], eax
  000b2	8b 4d c0	 mov	 ecx, DWORD PTR _n$[ebp]
  000b5	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _cur_user_palette_size
  000bb	76 17		 jbe	 SHORT $LN8@load_palet

; 830  :       if (!realloc_user_palette(n))

  000bd	8b 45 c0	 mov	 eax, DWORD PTR _n$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _realloc_user_palette
  000c6	83 c4 04	 add	 esp, 4
  000c9	85 c0		 test	 eax, eax
  000cb	75 07		 jne	 SHORT $LN8@load_palet

; 831  :          return 0;

  000cd	33 c0		 xor	 eax, eax
  000cf	e9 a1 00 00 00	 jmp	 $LN1@load_palet
$LN8@load_palet:

; 832  : 
; 833  :    // Need at least 1 entry for diverging values. Max_iters (0) is added automatically
; 834  :    if (n >= 2)

  000d4	83 7d c0 02	 cmp	 DWORD PTR _n$[ebp], 2
  000d8	0f 82 95 00 00
	00		 jb	 $LN10@load_palet

; 835  :    {
; 836  :       palettes[NUM_PALETTES].rgb[0] = 0; // max iters

  000de	b8 08 00 00 00	 mov	 eax, 8
  000e3	6b c8 0e	 imul	 ecx, eax, 14
  000e6	ba 04 00 00 00	 mov	 edx, 4
  000eb	6b c2 00	 imul	 eax, edx, 0
  000ee	8b 89 00 00 00
	00		 mov	 ecx, DWORD PTR _palettes[ecx]
  000f4	c7 04 08 00 00
	00 00		 mov	 DWORD PTR [eax+ecx], 0

; 837  :       // Array entries are 4 bytes and values are packed into 3 bytes in the file, so need to
; 838  :       // read each 24-bit value individually
; 839  :       for (i = 1; i < n; i++)

  000fb	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00102	eb 09		 jmp	 SHORT $LN4@load_palet
$LN2@load_palet:
  00104	8b 45 c4	 mov	 eax, DWORD PTR _i$[ebp]
  00107	83 c0 01	 add	 eax, 1
  0010a	89 45 c4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@load_palet:
  0010d	8b 45 c4	 mov	 eax, DWORD PTR _i$[ebp]
  00110	3b 45 c0	 cmp	 eax, DWORD PTR _n$[ebp]
  00113	73 2f		 jae	 SHORT $LN3@load_palet

; 840  :          if (!fread(&palettes[NUM_PALETTES].rgb[i], 3, 1, fp)) // High byte is a don't care. Assumes little endian

  00115	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00118	50		 push	 eax
  00119	6a 01		 push	 1
  0011b	6a 03		 push	 3
  0011d	b9 08 00 00 00	 mov	 ecx, 8
  00122	6b d1 0e	 imul	 edx, ecx, 14
  00125	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _palettes[edx]
  0012b	8b 4d c4	 mov	 ecx, DWORD PTR _i$[ebp]
  0012e	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 _fread
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	85 c0		 test	 eax, eax
  0013c	75 04		 jne	 SHORT $LN11@load_palet

; 841  :             return 0;

  0013e	33 c0		 xor	 eax, eax
  00140	eb 33		 jmp	 SHORT $LN1@load_palet
$LN11@load_palet:
  00142	eb c0		 jmp	 SHORT $LN2@load_palet
$LN3@load_palet:

; 842  : 
; 843  :       m->prev_pal = 0xFFFFFFFF; // tell apply_palette that user palette changed

  00144	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  00147	c7 80 f8 8d 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+36344], -1

; 844  :       num_valid_palettes = NUM_PALETTES + 1;

  00151	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _num_valid_palettes, 15 ; 0000000fH

; 845  :       palettes[NUM_PALETTES].size = n;

  0015b	b8 08 00 00 00	 mov	 eax, 8
  00160	6b c8 0e	 imul	 ecx, eax, 14
  00163	8b 55 c0	 mov	 edx, DWORD PTR _n$[ebp]
  00166	89 91 04 00 00
	00		 mov	 DWORD PTR _palettes[ecx+4], edx

; 846  : 
; 847  :       #ifdef DUMP_USER_PAL
; 848  :       dump_user_palette(n);  // #define DUMP_USER_PAL to dump the palette as a compilable array
; 849  :       #endif
; 850  : 
; 851  :       return NUM_PALETTES;   // succesfully loaded palette

  0016c	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00171	eb 02		 jmp	 SHORT $LN1@load_palet
$LN10@load_palet:

; 852  :    }
; 853  :    return 0; // bad file

  00173	33 c0		 xor	 eax, eax
$LN1@load_palet:

; 854  : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_load_palette_from_bmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _load_palette
_TEXT	SEGMENT
_m$ = -528						; size = 4
_p$ = -524						; size = 4
_rgb$ = -520						; size = 4
_n$ = -516						; size = 4
_str$ = -512						; size = 512
_fp$ = 8						; size = 4
_load_palette PROC					; COMDAT

; 742  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 02 00
	00		 sub	 esp, 656		; 00000290H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 743  :    char str[512];
; 744  :    unsigned n, rgb, *p;
; 745  :    man_calc_struct *m;
; 746  : 
; 747  :    m = &main_man_calc_struct;

  0000c	c7 85 f0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp], OFFSET _main_man_calc_struct

; 748  :    p = palettes[NUM_PALETTES].rgb;

  00016	b8 08 00 00 00	 mov	 eax, 8
  0001b	6b c8 0e	 imul	 ecx, eax, 14
  0001e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _palettes[ecx]
  00024	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _p$[ebp], edx

; 749  : 
; 750  :    // Set user palette to invalid by default (if valid, num_valid_palettes will be set to NUM_PALETTES + 1)
; 751  :    num_valid_palettes = NUM_PALETTES;

  0002a	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR _num_valid_palettes, 14 ; 0000000eH
$LN2@load_palet:

; 752  : 
; 753  :    while (1)

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 df 00 00
	00		 je	 $LN3@load_palet

; 754  :    {
; 755  :       n = 0;

  00041	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$[ebp], 0
$LN4@load_palet:

; 756  :       while (1)

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	85 c0		 test	 eax, eax
  00052	0f 84 8a 00 00
	00		 je	 $LN5@load_palet

; 757  :       {
; 758  :          if (feof(fp))

  00058	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _feof
  00061	83 c4 04	 add	 esp, 4
  00064	85 c0		 test	 eax, eax
  00066	74 02		 je	 SHORT $LN6@load_palet

; 759  :             break;

  00068	eb 78		 jmp	 SHORT $LN5@load_palet
$LN6@load_palet:

; 760  :          if (fgets(str, sizeof(str), fp) == NULL)

  0006a	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0006d	50		 push	 eax
  0006e	68 00 02 00 00	 push	 512			; 00000200H
  00073	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _str$[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _fgets
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN7@load_palet

; 761  :             break;

  00086	eb 5a		 jmp	 SHORT $LN5@load_palet
$LN7@load_palet:

; 762  : 
; 763  :          if (!get_palette_rgb_val(0, str, sizeof(str), &rgb))

  00088	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _rgb$[ebp]
  0008e	50		 push	 eax
  0008f	68 00 02 00 00	 push	 512			; 00000200H
  00094	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _str$[ebp]
  0009a	51		 push	 ecx
  0009b	6a 00		 push	 0
  0009d	e8 00 00 00 00	 call	 _get_palette_rgb_val
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	85 c0		 test	 eax, eax
  000a7	75 02		 jne	 SHORT $LN8@load_palet

; 764  :             continue;

  000a9	eb a0		 jmp	 SHORT $LN4@load_palet
$LN8@load_palet:

; 765  : 
; 766  :          if (n < cur_user_palette_size) // Set entry if we're within array size, else just count.

  000ab	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  000b1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _cur_user_palette_size
  000b7	73 15		 jae	 SHORT $LN9@load_palet

; 767  :             p[n] = rgb;

  000b9	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  000bf	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _p$[ebp]
  000c5	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _rgb$[ebp]
  000cb	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN9@load_palet:

; 768  :          n++;

  000ce	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 85 fc fd ff
	ff		 mov	 DWORD PTR _n$[ebp], eax

; 769  :       }

  000dd	e9 69 ff ff ff	 jmp	 $LN4@load_palet
$LN5@load_palet:

; 770  :       if (n > cur_user_palette_size)

  000e2	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  000e8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _cur_user_palette_size
  000ee	76 29		 jbe	 SHORT $LN10@load_palet

; 771  :       {
; 772  :          // oops: palette was too big to fit in our array. Need to reallocate and start over
; 773  :          if (!realloc_user_palette(n))

  000f0	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 _realloc_user_palette
  000fc	83 c4 04	 add	 esp, 4
  000ff	85 c0		 test	 eax, eax
  00101	75 04		 jne	 SHORT $LN12@load_palet

; 774  :             return 0;

  00103	33 c0		 xor	 eax, eax
  00105	eb 59		 jmp	 SHORT $LN1@load_palet
$LN12@load_palet:

; 775  :          fseek(fp, 0, SEEK_SET);  // restart at beginning of file

  00107	6a 00		 push	 0
  00109	6a 00		 push	 0
  0010b	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _fseek
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 776  :       }

  00117	eb 02		 jmp	 SHORT $LN11@load_palet
$LN10@load_palet:

; 777  :       else
; 778  :          break; // done

  00119	eb 05		 jmp	 SHORT $LN3@load_palet
$LN11@load_palet:

; 779  :    }

  0011b	e9 14 ff ff ff	 jmp	 $LN2@load_palet
$LN3@load_palet:

; 780  : 
; 781  :    // Need at least 2 entries: one for max iters and one for diverging values.
; 782  :    if (n >= 2)

  00120	83 bd fc fd ff
	ff 02		 cmp	 DWORD PTR _n$[ebp], 2
  00127	72 35		 jb	 SHORT $LN13@load_palet

; 783  :    {
; 784  :       // Tell apply_palette that user palette changed. Only applies to main calc struct.
; 785  :       // Save function will reset this value for its own structure
; 786  :       m->prev_pal = 0xFFFFFFFF;

  00129	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  0012f	c7 80 f8 8d 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+36344], -1

; 787  :       num_valid_palettes = NUM_PALETTES + 1;

  00139	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _num_valid_palettes, 15 ; 0000000fH

; 788  :       palettes[NUM_PALETTES].size = n;

  00143	b8 08 00 00 00	 mov	 eax, 8
  00148	6b c8 0e	 imul	 ecx, eax, 14
  0014b	8b 95 fc fd ff
	ff		 mov	 edx, DWORD PTR _n$[ebp]
  00151	89 91 04 00 00
	00		 mov	 DWORD PTR _palettes[ecx+4], edx

; 789  :       return NUM_PALETTES;   // succesfully loaded palette

  00157	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  0015c	eb 02		 jmp	 SHORT $LN1@load_palet
$LN13@load_palet:

; 790  :    }
; 791  :    return 0;

  0015e	33 c0		 xor	 eax, eax
$LN1@load_palet:

; 792  : }

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
_load_palette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File d:\stanley\desktop\quickman_v110\source\palettes.c
;	COMDAT _init_palettes
_TEXT	SEGMENT
tv176 = -108						; size = 8
tv165 = -108						; size = 8
tv144 = -104						; size = 4
tv135 = -104						; size = 4
_s$ = -36						; size = 4
_m$ = -32						; size = 4
_i$ = -28						; size = 4
_scale$ = -24						; size = 8
_pal_k2$ = -16						; size = 8
_pal_k1$ = -8						; size = 8
_diverged_thresh$ = 8					; size = 8
_init_palettes PROC					; COMDAT

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 876  :    double pal_k1, pal_k2, scale;
; 877  :    int i;
; 878  :    man_calc_struct *m, *s;
; 879  : 
; 880  :    m = &main_man_calc_struct;

  00009	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], OFFSET _main_man_calc_struct

; 881  :    s = &save_man_calc_struct;

  00010	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET _save_man_calc_struct

; 882  : 
; 883  :    // To start with, allocate a user palette of USER_PALETTE_SIZE entries. If this ever turns
; 884  :    // out to be too small, it will be reallocated.
; 885  :    palettes[NUM_PALETTES].rgb = (unsigned *) malloc(USER_PALETTE_SIZE *

  00017	68 00 00 01 00	 push	 65536			; 00010000H
  0001c	e8 00 00 00 00	 call	 _malloc
  00021	83 c4 04	 add	 esp, 4
  00024	b9 08 00 00 00	 mov	 ecx, 8
  00029	6b d1 0e	 imul	 edx, ecx, 14
  0002c	89 82 00 00 00
	00		 mov	 DWORD PTR _palettes[edx], eax

; 886  :                                              sizeof(palettes[NUM_PALETTES].rgb[0]));
; 887  :    if (palettes[NUM_PALETTES].rgb == NULL)

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	6b c8 0e	 imul	 ecx, eax, 14
  0003a	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR _palettes[ecx], 0
  00041	75 07		 jne	 SHORT $LN8@init_palet

; 888  :       return 0;

  00043	33 c0		 xor	 eax, eax
  00045	e9 34 01 00 00	 jmp	 $LN1@init_palet
$LN8@init_palet:

; 889  : 
; 890  :    // Make the color interpolation table for the normalized iteration count algorithm.
; 891  :    // Scale factors range between 0 and 1, and are scaled up by 256 to allow integer multiplication.
; 892  :    // See get_normalized_color()
; 893  : 
; 894  :    pal_k1 = 1.44269504088963407; // 1 / ln(2)

  0004a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff71547652b8eca
  00052	f2 0f 11 45 f8	 movsd	 QWORD PTR _pal_k1$[ebp], xmm0

; 895  : 
; 896  :    // K2 = K1 * ln(2 * ln(B)); B = divergence magnitude = sqrt(DIVERGED_THRESH); 2 * ln(sqrt(x)) = ln(x)
; 897  :    pal_k2 = pal_k1 * log(log(diverged_thresh)); // this is a constant for now but may not be later

  00057	83 ec 08	 sub	 esp, 8
  0005a	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _diverged_thresh$[ebp]
  0005f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00064	e8 00 00 00 00	 call	 _log
  00069	dd 1c 24	 fstp	 QWORD PTR [esp]
  0006c	e8 00 00 00 00	 call	 _log
  00071	83 c4 08	 add	 esp, 8
  00074	dd 5d 94	 fstp	 QWORD PTR tv165[ebp]
  00077	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv165[ebp]
  0007c	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _pal_k1$[ebp]
  00081	f2 0f 11 45 f0	 movsd	 QWORD PTR _pal_k2$[ebp], xmm0

; 898  : 
; 899  :    for (i = 2; i < NUM_ELEM(interp_table); i++)

  00086	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  0008d	eb 09		 jmp	 SHORT $LN4@init_palet
$LN2@init_palet:
  0008f	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00092	83 c0 01	 add	 eax, 1
  00095	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@init_palet:
  00098	81 7d e4 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  0009f	73 62		 jae	 SHORT $LN3@init_palet

; 900  :    {
; 901  :       scale = (pal_k1 * log(log((double) i * (1.0 / MAGSQ_SCALE_FACTOR))) - pal_k2);

  000a1	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _i$[ebp]
  000a6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000ae	83 ec 08	 sub	 esp, 8
  000b1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 _log
  000bb	dd 1c 24	 fstp	 QWORD PTR [esp]
  000be	e8 00 00 00 00	 call	 _log
  000c3	83 c4 08	 add	 esp, 8
  000c6	dd 5d 94	 fstp	 QWORD PTR tv176[ebp]
  000c9	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv176[ebp]
  000ce	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _pal_k1$[ebp]
  000d3	f2 0f 5c 45 f0	 subsd	 xmm0, QWORD PTR _pal_k2$[ebp]
  000d8	f2 0f 11 45 e8	 movsd	 QWORD PTR _scale$[ebp], xmm0

; 902  :       interp_table[i] = (INTERP_TABLE_ENTRY) (scale * 256.0 + 0.49); // round to nearest

  000dd	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _scale$[ebp]
  000e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4070000000000000
  000ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fdf5c28f5c28f5c
  000f2	e8 00 00 00 00	 call	 __dtoui3
  000f7	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  000fa	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _interp_table[ecx*4], eax

; 903  :    }

  00101	eb 8c		 jmp	 SHORT $LN2@init_palet
$LN3@init_palet:

; 904  : 
; 905  :    for (i = 1; i < MAX_THREADS; i++) // 0 is the master thread

  00103	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0010a	eb 09		 jmp	 SHORT $LN7@init_palet
$LN5@init_palet:
  0010c	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0010f	83 c0 01	 add	 eax, 1
  00112	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@init_palet:
  00115	83 7d e4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00119	7d 54		 jge	 SHORT $LN6@init_palet

; 906  :       if ( (m->pal_events[i] = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL ||

  0011b	6a 00		 push	 0
  0011d	6a 00		 push	 0
  0011f	6a 00		 push	 0
  00121	6a 00		 push	 0
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  00129	89 45 98	 mov	 DWORD PTR tv135[ebp], eax
  0012c	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0012f	8b 4d e0	 mov	 ecx, DWORD PTR _m$[ebp]
  00132	8b 55 98	 mov	 edx, DWORD PTR tv135[ebp]
  00135	89 94 81 88 92
	00 00		 mov	 DWORD PTR [ecx+eax*4+37512], edx
  0013c	83 7d 98 00	 cmp	 DWORD PTR tv135[ebp], 0
  00140	74 27		 je	 SHORT $LN10@init_palet
  00142	6a 00		 push	 0
  00144	6a 00		 push	 0
  00146	6a 00		 push	 0
  00148	6a 00		 push	 0
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  00150	89 45 98	 mov	 DWORD PTR tv144[ebp], eax
  00153	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00156	8b 4d dc	 mov	 ecx, DWORD PTR _s$[ebp]
  00159	8b 55 98	 mov	 edx, DWORD PTR tv144[ebp]
  0015c	89 94 81 88 92
	00 00		 mov	 DWORD PTR [ecx+eax*4+37512], edx
  00163	83 7d 98 00	 cmp	 DWORD PTR tv144[ebp], 0
  00167	75 04		 jne	 SHORT $LN9@init_palet
$LN10@init_palet:

; 907  :            (s->pal_events[i] = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL )
; 908  :          return 0;

  00169	33 c0		 xor	 eax, eax
  0016b	eb 11		 jmp	 SHORT $LN1@init_palet
$LN9@init_palet:
  0016d	eb 9d		 jmp	 SHORT $LN5@init_palet
$LN6@init_palet:

; 909  : 
; 910  :    return num_valid_palettes = NUM_PALETTES;

  0016f	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR _num_valid_palettes, 14 ; 0000000eH
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_valid_palettes
$LN1@init_palet:

; 911  : }

  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
_init_palettes ENDP
_TEXT	ENDS
END
